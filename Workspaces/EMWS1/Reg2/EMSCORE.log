MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:46:37" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 19, 2018
Time:                23:46:37
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O01XFJCK "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Reg2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O01XFJCK new;
MPRINT(EM_DIAGRAM):   run;
35156      filename emflow "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35157      *------------------------------------------------------------*;
35158      * Reg2: Scoring DATA data;
35159      *------------------------------------------------------------*;
35160      data EMWS1.Reg2_TRAIN
35161      / view=EMWS1.Reg2_TRAIN
35162      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_TRAIN / view=EMWS1.Reg2_TRAIN ;
35163      set EMWS1.Part_TRAIN
35164      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_TRAIN ;
35165      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas.
35166     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
35167     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
35168     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
35169     +
35170     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
35171     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
35172     +
35173     +drop _Y;
MPRINT(EM_DIAGRAM):   drop _Y;
35174     +_Y = SalePrice ;
MPRINT(EM_DIAGRAM):   _Y = SalePrice ;
35175     +
35176     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
35177     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
35178     +
35179     +*** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
35180     +if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
35181     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35182     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35183     +end;
MPRINT(EM_DIAGRAM):   end;
35184     +
35185     +*** Check Basement for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Basement for missing values ;
35186     +if missing( Basement ) then do;
MPRINT(EM_DIAGRAM):   if missing( Basement ) then do;
35187     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35188     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35189     +end;
MPRINT(EM_DIAGRAM):   end;
35190     +
35191     +*** Check Baths for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Baths for missing values ;
35192     +if missing( Baths ) then do;
MPRINT(EM_DIAGRAM):   if missing( Baths ) then do;
35193     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35194     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35195     +end;
MPRINT(EM_DIAGRAM):   end;
35196     +
35197     +*** Check FirePlace for missing values ;
MPRINT(EM_DIAGRAM):   *** Check FirePlace for missing values ;
35198     +if missing( FirePlace ) then do;
MPRINT(EM_DIAGRAM):   if missing( FirePlace ) then do;
35199     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35200     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35201     +end;
MPRINT(EM_DIAGRAM):   end;
35202     +
35203     +*** Check FirstFloor for missing values ;
MPRINT(EM_DIAGRAM):   *** Check FirstFloor for missing values ;
35204     +if missing( FirstFloor ) then do;
MPRINT(EM_DIAGRAM):   if missing( FirstFloor ) then do;
35205     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35206     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35207     +end;
MPRINT(EM_DIAGRAM):   end;
35208     +
35209     +*** Check GarageSize for missing values ;
MPRINT(EM_DIAGRAM):   *** Check GarageSize for missing values ;
35210     +if missing( GarageSize ) then do;
MPRINT(EM_DIAGRAM):   if missing( GarageSize ) then do;
35211     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35212     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35213     +end;
MPRINT(EM_DIAGRAM):   end;
35214     +
35215     +*** Check SecondFloor for missing values ;
MPRINT(EM_DIAGRAM):   *** Check SecondFloor for missing values ;
35216     +if missing( SecondFloor ) then do;
MPRINT(EM_DIAGRAM):   if missing( SecondFloor ) then do;
35217     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35218     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35219     +end;
MPRINT(EM_DIAGRAM):   end;
35220     +
35221     +*** Check TotalArea for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TotalArea for missing values ;
35222     +if missing( TotalArea ) then do;
MPRINT(EM_DIAGRAM):   if missing( TotalArea ) then do;
35223     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35224     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35225     +end;
MPRINT(EM_DIAGRAM):   end;
35226     +
35227     +*** Generate dummy variables for BasementType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BasementType ;
35228     +drop _0_0 _0_1 ;
MPRINT(EM_DIAGRAM):   drop _0_0 _0_1 ;
35229     +if missing( BasementType ) then do;
MPRINT(EM_DIAGRAM):   if missing( BasementType ) then do;
35230     +   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
35231     +   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
35232     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35233     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35234     +end;
MPRINT(EM_DIAGRAM):   end;
35235     +else do;
MPRINT(EM_DIAGRAM):   else do;
35236     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35237     +   _dm12 = put( BasementType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( BasementType , BEST. );
35238     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = -1;
MPRINT(EM_DIAGRAM):   end;
35239     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
35240     +      _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
35241     +      _0_1 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = 1;
35242     +   end;
MPRINT(EM_DIAGRAM):   end;
35243     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
35244     +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = 1;
35245     +      _0_1 = 1;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
35246     +   end;
MPRINT(EM_DIAGRAM):   end;
35247     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else do;
35248     +      _0_0 = 1;
MPRINT(EM_DIAGRAM):   _0_0 = .;
35249     +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = .;
35250     +   end;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35251     +   else do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
35252     +      _0_0 = .;
MPRINT(EM_DIAGRAM):   end;
35253     +      _0_1 = .;
35254     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CentralAir ;
35255     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
35256     +   end;
MPRINT(EM_DIAGRAM):   if missing( CentralAir ) then do;
35257     +end;
MPRINT(EM_DIAGRAM):   _1_0 = .;
35258     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35259     +*** Generate dummy variables for CentralAir ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35260     +drop _1_0 ;
MPRINT(EM_DIAGRAM):   end;
35261     +if missing( CentralAir ) then do;
35262     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   else do;
35263     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
35264     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35265     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( CentralAir , BEST. );
35266     +else do;
35267     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
35268     +   _dm12 = put( CentralAir , BEST. );
35269     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
35270     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
35271     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   end;
35272     +   end;
35273     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _1_0 = .;
35274     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35275     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35276     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
35277     +      _1_0 = .;
35278     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ConstructionType ;
35279     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 ;
35280     +   end;
MPRINT(EM_DIAGRAM):   if missing( ConstructionType ) then do;
35281     +end;
MPRINT(EM_DIAGRAM):   _2_0 = .;
35282     +
MPRINT(EM_DIAGRAM):   _2_1 = .;
35283     +*** Generate dummy variables for ConstructionType ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35284     +drop _2_0 _2_1 ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35285     +if missing( ConstructionType ) then do;
MPRINT(EM_DIAGRAM):   end;
35286     +   _2_0 = .;
35287     +   _2_1 = .;
MPRINT(EM_DIAGRAM):   else do;
35288     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
35289     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35290     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( ConstructionType , BEST. );
35291     +else do;
35292     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
35293     +   _dm12 = put( ConstructionType , BEST. );
35294     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
MPRINT(EM_DIAGRAM):   end;
35295     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
35296     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
35297     +      _2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
35298     +   end;
MPRINT(EM_DIAGRAM):   end;
35299     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
35300     +      _2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
35301     +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
35302     +   end;
MPRINT(EM_DIAGRAM):   end;
35303     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else do;
35304     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = .;
35305     +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = .;
35306     +   end;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35307     +   else do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
35308     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   end;
35309     +      _2_1 = .;
35310     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GarageType ;
35311     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
35312     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
35313     +end;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
35314     +
MPRINT(EM_DIAGRAM):   _3_1 = 0;
35315     +*** Generate dummy variables for GarageType ;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
35316     +drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
35317     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
35318     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   if missing( GarageType ) then do;
35319     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = .;
35320     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = .;
35321     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = .;
35322     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = .;
35323     +if missing( GarageType ) then do;
MPRINT(EM_DIAGRAM):   _3_4 = .;
35324     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35325     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35326     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   end;
35327     +   _3_3 = .;
35328     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   else do;
35329     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
35330     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35331     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( GarageType , BEST. );
35332     +else do;
35333     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
35334     +   _dm12 = put( GarageType , BEST. );
35335     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
35336     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
35337     +      _3_2 = 1;
MPRINT(EM_DIAGRAM):   end;
35338     +   end;
35339     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
35340     +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   end;
35341     +   end;
35342     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
35343     +      _3_3 = 1;
MPRINT(EM_DIAGRAM):   end;
35344     +   end;
35345     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
35346     +      _3_1 = 1;
MPRINT(EM_DIAGRAM):   end;
35347     +   end;
35348     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
35349     +      _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
35350     +   end;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
35351     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
35352     +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   end;
35353     +      _3_1 = -1;
35354     +      _3_2 = -1;
MPRINT(EM_DIAGRAM):   else do;
35355     +      _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = .;
35356     +      _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = .;
35357     +   end;
MPRINT(EM_DIAGRAM):   _3_2 = .;
35358     +   else do;
MPRINT(EM_DIAGRAM):   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
35359     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35360     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35361     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   end;
35362     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   end;
35363     +      _3_4 = .;
35364     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LotSize ;
35365     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 ;
35366     +   end;
MPRINT(EM_DIAGRAM):   if missing( LotSize ) then do;
35367     +end;
MPRINT(EM_DIAGRAM):   _4_0 = .;
35368     +
MPRINT(EM_DIAGRAM):   _4_1 = .;
35369     +*** Generate dummy variables for LotSize ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35370     +drop _4_0 _4_1 ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35371     +if missing( LotSize ) then do;
MPRINT(EM_DIAGRAM):   end;
35372     +   _4_0 = .;
35373     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   else do;
35374     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
35375     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35376     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( LotSize , BEST. );
35377     +else do;
35378     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
35379     +   _dm12 = put( LotSize , BEST. );
35380     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
MPRINT(EM_DIAGRAM):   end;
35381     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
35382     +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
35383     +      _4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
35384     +   end;
MPRINT(EM_DIAGRAM):   end;
35385     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
35386     +      _4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
35387     +      _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
35388     +   end;
MPRINT(EM_DIAGRAM):   end;
35389     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else do;
35390     +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = .;
35391     +      _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = .;
35392     +   end;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35393     +   else do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
35394     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   end;
35395     +      _4_1 = .;
35396     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Neighborhood ;
35397     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
35398     +   end;
MPRINT(EM_DIAGRAM):   if missing( Neighborhood ) then do;
35399     +end;
MPRINT(EM_DIAGRAM):   _5_0 = .;
35400     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35401     +*** Generate dummy variables for Neighborhood ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35402     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   end;
35403     +if missing( Neighborhood ) then do;
35404     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   else do;
35405     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
35406     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35407     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( Neighborhood , BEST. );
35408     +else do;
35409     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
35410     +   _dm12 = put( Neighborhood , BEST. );
35411     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
35412     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
35413     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   end;
35414     +   end;
35415     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
35416     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35417     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35418     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
35419     +      _5_0 = .;
35420     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for WallType ;
35421     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 ;
35422     +   end;
MPRINT(EM_DIAGRAM):   if missing( WallType ) then do;
35423     +end;
MPRINT(EM_DIAGRAM):   _6_0 = .;
35424     +
MPRINT(EM_DIAGRAM):   _6_1 = .;
35425     +*** Generate dummy variables for WallType ;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35426     +drop _6_0 _6_1 ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35427     +if missing( WallType ) then do;
MPRINT(EM_DIAGRAM):   end;
35428     +   _6_0 = .;
35429     +   _6_1 = .;
MPRINT(EM_DIAGRAM):   else do;
35430     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
35431     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35432     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( WallType , BEST. );
35433     +else do;
35434     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
35435     +   _dm12 = put( WallType , BEST. );
35436     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
MPRINT(EM_DIAGRAM):   end;
35437     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
35438     +      _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
35439     +      _6_1 = 1;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
35440     +   end;
MPRINT(EM_DIAGRAM):   end;
35441     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
35442     +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
35443     +      _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
35444     +   end;
MPRINT(EM_DIAGRAM):   end;
35445     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else do;
35446     +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = .;
35447     +      _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = .;
35448     +   end;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35449     +   else do;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   end;
35450     +      _6_0 = .;
MPRINT(EM_DIAGRAM):   end;
35451     +      _6_1 = .;
35452     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
35453     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
35454     +   end;
MPRINT(EM_DIAGRAM):   _LP0 = 75984.2752293578;
35455     +end;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
35456     +
MPRINT(EM_DIAGRAM):   end;
35457     +*** If missing inputs, use averages;
35458     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
35459     +   _LP0 =     75984.2752293578;
MPRINT(EM_DIAGRAM):   drop _TEMP;
35460     +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   drop _LP0;
35461     +end;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
35462     +
35463     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
35464     +drop _TEMP;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
35465     +drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -431.936071671528 * _TEMP);
35466     +_LP0 = 0;
35467     +
MPRINT(EM_DIAGRAM):   *** Effect: Basement ;
35468     +***  Effect: Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Basement ;
35469     +_TEMP = Age ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.18687828412111 * _TEMP);
35470     +_LP0 = _LP0 + (   -431.936071671528 * _TEMP);
35471     +
MPRINT(EM_DIAGRAM):   *** Effect: BasementType ;
35472     +***  Effect: Basement ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35473     +_TEMP = Basement ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -9160.85317146442) * _TEMP * _0_0;
35474     +_LP0 = _LP0 + (    2.18687828412111 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4491.95255674066) * _TEMP * _0_1;
35475     +
35476     +***  Effect: BasementType ;
MPRINT(EM_DIAGRAM):   *** Effect: Baths ;
35477     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = Baths ;
35478     +_LP0 = _LP0 + (   -9160.85317146442) * _TEMP * _0_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 471.670852372481 * _TEMP);
35479     +_LP0 = _LP0 + (    4491.95255674066) * _TEMP * _0_1;
35480     +
MPRINT(EM_DIAGRAM):   *** Effect: CentralAir ;
35481     +***  Effect: Baths ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35482     +_TEMP = Baths ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1213.32943828199) * _TEMP * _1_0;
35483     +_LP0 = _LP0 + (    471.670852372481 * _TEMP);
35484     +
MPRINT(EM_DIAGRAM):   *** Effect: ConstructionType ;
35485     +***  Effect: CentralAir ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35486     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -17878.5942963889) * _TEMP * _2_0;
35487     +_LP0 = _LP0 + (   -1213.32943828199) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -14287.5427047542) * _TEMP * _2_1;
35488     +
35489     +***  Effect: ConstructionType ;
MPRINT(EM_DIAGRAM):   *** Effect: FirePlace ;
35490     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = FirePlace ;
35491     +_LP0 = _LP0 + (   -17878.5942963889) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1702.40321440209 * _TEMP);
35492     +_LP0 = _LP0 + (   -14287.5427047542) * _TEMP * _2_1;
35493     +
MPRINT(EM_DIAGRAM):   *** Effect: FirstFloor ;
35494     +***  Effect: FirePlace ;
MPRINT(EM_DIAGRAM):   _TEMP = FirstFloor ;
35495     +_TEMP = FirePlace ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 7.3902914604401 * _TEMP);
35496     +_LP0 = _LP0 + (   -1702.40321440209 * _TEMP);
35497     +
MPRINT(EM_DIAGRAM):   *** Effect: GarageSize ;
35498     +***  Effect: FirstFloor ;
MPRINT(EM_DIAGRAM):   _TEMP = GarageSize ;
35499     +_TEMP = FirstFloor ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3891.72416970124 * _TEMP);
35500     +_LP0 = _LP0 + (     7.3902914604401 * _TEMP);
35501     +
MPRINT(EM_DIAGRAM):   *** Effect: GarageType ;
35502     +***  Effect: GarageSize ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35503     +_TEMP = GarageSize ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3417.41210774315) * _TEMP * _3_0;
35504     +_LP0 = _LP0 + (    3891.72416970124 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -801.914423123984) * _TEMP * _3_1;
35505     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3383.58879889631) * _TEMP * _3_2;
35506     +***  Effect: GarageType ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6532.9209186196) * _TEMP * _3_3;
35507     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -16566.7236017071) * _TEMP * _3_4;
35508     +_LP0 = _LP0 + (    3417.41210774315) * _TEMP * _3_0;
35509     +_LP0 = _LP0 + (   -801.914423123984) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   *** Effect: LotSize ;
35510     +_LP0 = _LP0 + (    3383.58879889631) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35511     +_LP0 = _LP0 + (     6532.9209186196) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -174.269009800207) * _TEMP * _4_0;
35512     +_LP0 = _LP0 + (   -16566.7236017071) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8400.20858929302) * _TEMP * _4_1;
35513     +
35514     +***  Effect: LotSize ;
MPRINT(EM_DIAGRAM):   *** Effect: Neighborhood ;
35515     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35516     +_LP0 = _LP0 + (   -174.269009800207) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -828.923780605267) * _TEMP * _5_0;
35517     +_LP0 = _LP0 + (   -8400.20858929302) * _TEMP * _4_1;
35518     +
MPRINT(EM_DIAGRAM):   *** Effect: SecondFloor ;
35519     +***  Effect: Neighborhood ;
MPRINT(EM_DIAGRAM):   _TEMP = SecondFloor ;
35520     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -52.9687723273401 * _TEMP);
35521     +_LP0 = _LP0 + (   -828.923780605267) * _TEMP * _5_0;
35522     +
MPRINT(EM_DIAGRAM):   *** Effect: TotalArea ;
35523     +***  Effect: SecondFloor ;
MPRINT(EM_DIAGRAM):   _TEMP = TotalArea ;
35524     +_TEMP = SecondFloor ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 9.94109260562379 * _TEMP);
35525     +_LP0 = _LP0 + (   -52.9687723273401 * _TEMP);
35526     +
MPRINT(EM_DIAGRAM):   *** Effect: WallType ;
35527     +***  Effect: TotalArea ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35528     +_TEMP = TotalArea ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2473.21138494035) * _TEMP * _6_0;
35529     +_LP0 = _LP0 + (    9.94109260562379 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2541.97716567457) * _TEMP * _6_1;
35530     +
MPRINT(EM_DIAGRAM):   *--- Intercept ---*;
35531     +***  Effect: WallType ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 81836.5530427854);
35532     +_TEMP = 1;
35533     +_LP0 = _LP0 + (   -2473.21138494035) * _TEMP * _6_0;
35534     +_LP0 = _LP0 + (   -2541.97716567457) * _TEMP * _6_1;
35535     +*--- Intercept ---*;
35536     +_LP0 = _LP0 + (    81836.5530427854);
MPRINT(EM_DIAGRAM):   REG2DR1: *** Predicted Value, Error, and Residual;
35537     +
MPRINT(EM_DIAGRAM):   label P_SalePrice = 'Predicted: SalePrice' ;
35538     +REG2DR1:
MPRINT(EM_DIAGRAM):   P_SalePrice = _LP0;
35539     +
35540     +*** Predicted Value, Error, and Residual;
MPRINT(EM_DIAGRAM):   drop _R;
35541     +label P_SalePrice = 'Predicted: SalePrice' ;
MPRINT(EM_DIAGRAM):   if _Y = . then do;
MPRINT(EM_DIAGRAM):   R_SalePrice = .;
35542     +P_SalePrice = _LP0;
MPRINT(EM_DIAGRAM):   end;
35543     +
35544     +drop _R;
MPRINT(EM_DIAGRAM):   else do;
35545     +if _Y = . then do;
MPRINT(EM_DIAGRAM):   _R = _Y - _LP0;
35546     +   R_SalePrice = .;
MPRINT(EM_DIAGRAM):   label R_SalePrice = 'Residual: SalePrice' ;
35547     +end;
35548     +else do;
MPRINT(EM_DIAGRAM):   R_SalePrice = _R;
MPRINT(EM_DIAGRAM):   end;
35549     +   _R = _Y - _LP0;
35550     +    label R_SalePrice = 'Residual: SalePrice' ;
MPRINT(EM_DIAGRAM):   *************************************;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
35551     +   R_SalePrice = _R;
MPRINT(EM_DIAGRAM):   *************************************;
35552     +end;
35553     +
35554     +*************************************;
35555     +***** end scoring code for regression;
35556     +*************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
35557      run;

NOTE: DATA STEP view saved on file EMWS1.REG2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
35558      quit;
35559      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
35560      filename emflow "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
35561      *------------------------------------------------------------*;
35562      * Reg2: Scoring VALIDATE data;
35563      *------------------------------------------------------------*;
35564      data EMWS1.Reg2_VALIDATE
35565      / view=EMWS1.Reg2_VALIDATE
35566      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_VALIDATE / view=EMWS1.Reg2_VALIDATE ;
35567      set EMWS1.Part_VALIDATE
35568      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_VALIDATE ;
35569      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas.
35570     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
35571     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
35572     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
35573     +
35574     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
35575     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
35576     +
35577     +drop _Y;
MPRINT(EM_DIAGRAM):   drop _Y;
35578     +_Y = SalePrice ;
MPRINT(EM_DIAGRAM):   _Y = SalePrice ;
35579     +
35580     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
35581     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
35582     +
35583     +*** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
35584     +if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
35585     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35586     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35587     +end;
MPRINT(EM_DIAGRAM):   end;
35588     +
35589     +*** Check Basement for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Basement for missing values ;
35590     +if missing( Basement ) then do;
MPRINT(EM_DIAGRAM):   if missing( Basement ) then do;
35591     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35592     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35593     +end;
MPRINT(EM_DIAGRAM):   end;
35594     +
35595     +*** Check Baths for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Baths for missing values ;
35596     +if missing( Baths ) then do;
MPRINT(EM_DIAGRAM):   if missing( Baths ) then do;
35597     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35598     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35599     +end;
MPRINT(EM_DIAGRAM):   end;
35600     +
35601     +*** Check FirePlace for missing values ;
MPRINT(EM_DIAGRAM):   *** Check FirePlace for missing values ;
35602     +if missing( FirePlace ) then do;
MPRINT(EM_DIAGRAM):   if missing( FirePlace ) then do;
35603     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35604     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35605     +end;
MPRINT(EM_DIAGRAM):   end;
35606     +
35607     +*** Check FirstFloor for missing values ;
MPRINT(EM_DIAGRAM):   *** Check FirstFloor for missing values ;
35608     +if missing( FirstFloor ) then do;
MPRINT(EM_DIAGRAM):   if missing( FirstFloor ) then do;
35609     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35610     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35611     +end;
MPRINT(EM_DIAGRAM):   end;
35612     +
35613     +*** Check GarageSize for missing values ;
MPRINT(EM_DIAGRAM):   *** Check GarageSize for missing values ;
35614     +if missing( GarageSize ) then do;
MPRINT(EM_DIAGRAM):   if missing( GarageSize ) then do;
35615     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35616     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35617     +end;
MPRINT(EM_DIAGRAM):   end;
35618     +
35619     +*** Check SecondFloor for missing values ;
MPRINT(EM_DIAGRAM):   *** Check SecondFloor for missing values ;
35620     +if missing( SecondFloor ) then do;
MPRINT(EM_DIAGRAM):   if missing( SecondFloor ) then do;
35621     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35622     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35623     +end;
MPRINT(EM_DIAGRAM):   end;
35624     +
35625     +*** Check TotalArea for missing values ;
MPRINT(EM_DIAGRAM):   *** Check TotalArea for missing values ;
35626     +if missing( TotalArea ) then do;
MPRINT(EM_DIAGRAM):   if missing( TotalArea ) then do;
35627     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35628     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35629     +end;
MPRINT(EM_DIAGRAM):   end;
35630     +
35631     +*** Generate dummy variables for BasementType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BasementType ;
35632     +drop _0_0 _0_1 ;
MPRINT(EM_DIAGRAM):   drop _0_0 _0_1 ;
35633     +if missing( BasementType ) then do;
MPRINT(EM_DIAGRAM):   if missing( BasementType ) then do;
35634     +   _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
35635     +   _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
35636     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35637     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35638     +end;
MPRINT(EM_DIAGRAM):   end;
35639     +else do;
MPRINT(EM_DIAGRAM):   else do;
35640     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35641     +   _dm12 = put( BasementType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( BasementType , BEST. );
35642     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
35643     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
35644     +      _0_0 = -1;
MPRINT(EM_DIAGRAM):   _0_0 = -1;
35645     +      _0_1 = -1;
MPRINT(EM_DIAGRAM):   _0_1 = -1;
35646     +   end;
MPRINT(EM_DIAGRAM):   end;
35647     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
35648     +      _0_0 = 0;
MPRINT(EM_DIAGRAM):   _0_0 = 0;
35649     +      _0_1 = 1;
MPRINT(EM_DIAGRAM):   _0_1 = 1;
35650     +   end;
MPRINT(EM_DIAGRAM):   end;
35651     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
35652     +      _0_0 = 1;
MPRINT(EM_DIAGRAM):   _0_0 = 1;
35653     +      _0_1 = 0;
MPRINT(EM_DIAGRAM):   _0_1 = 0;
35654     +   end;
MPRINT(EM_DIAGRAM):   end;
35655     +   else do;
MPRINT(EM_DIAGRAM):   else do;
35656     +      _0_0 = .;
MPRINT(EM_DIAGRAM):   _0_0 = .;
35657     +      _0_1 = .;
MPRINT(EM_DIAGRAM):   _0_1 = .;
35658     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35659     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35660     +   end;
MPRINT(EM_DIAGRAM):   end;
35661     +end;
MPRINT(EM_DIAGRAM):   end;
35662     +
35663     +*** Generate dummy variables for CentralAir ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CentralAir ;
35664     +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
35665     +if missing( CentralAir ) then do;
MPRINT(EM_DIAGRAM):   if missing( CentralAir ) then do;
35666     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
35667     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35668     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35669     +end;
MPRINT(EM_DIAGRAM):   end;
35670     +else do;
MPRINT(EM_DIAGRAM):   else do;
35671     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35672     +   _dm12 = put( CentralAir , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( CentralAir , BEST. );
35673     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
35674     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
35675     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
35676     +   end;
MPRINT(EM_DIAGRAM):   end;
35677     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
35678     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
35679     +   end;
MPRINT(EM_DIAGRAM):   end;
35680     +   else do;
MPRINT(EM_DIAGRAM):   else do;
35681     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
35682     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35683     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35684     +   end;
MPRINT(EM_DIAGRAM):   end;
35685     +end;
MPRINT(EM_DIAGRAM):   end;
35686     +
35687     +*** Generate dummy variables for ConstructionType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ConstructionType ;
35688     +drop _2_0 _2_1 ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 ;
35689     +if missing( ConstructionType ) then do;
MPRINT(EM_DIAGRAM):   if missing( ConstructionType ) then do;
35690     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
35691     +   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
35692     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35693     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35694     +end;
MPRINT(EM_DIAGRAM):   end;
35695     +else do;
MPRINT(EM_DIAGRAM):   else do;
35696     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35697     +   _dm12 = put( ConstructionType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( ConstructionType , BEST. );
35698     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
35699     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
35700     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
35701     +      _2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
35702     +   end;
MPRINT(EM_DIAGRAM):   end;
35703     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
35704     +      _2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
35705     +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
35706     +   end;
MPRINT(EM_DIAGRAM):   end;
35707     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
35708     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
35709     +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
35710     +   end;
MPRINT(EM_DIAGRAM):   end;
35711     +   else do;
MPRINT(EM_DIAGRAM):   else do;
35712     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
35713     +      _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
35714     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35715     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35716     +   end;
MPRINT(EM_DIAGRAM):   end;
35717     +end;
MPRINT(EM_DIAGRAM):   end;
35718     +
35719     +*** Generate dummy variables for GarageType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GarageType ;
35720     +drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
35721     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
35722     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
35723     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
35724     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
35725     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
35726     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
35727     +if missing( GarageType ) then do;
MPRINT(EM_DIAGRAM):   if missing( GarageType ) then do;
35728     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
35729     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
35730     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
35731     +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
35732     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
35733     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35734     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35735     +end;
MPRINT(EM_DIAGRAM):   end;
35736     +else do;
MPRINT(EM_DIAGRAM):   else do;
35737     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35738     +   _dm12 = put( GarageType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GarageType , BEST. );
35739     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
35740     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
35741     +      _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
35742     +   end;
MPRINT(EM_DIAGRAM):   end;
35743     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
35744     +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
35745     +   end;
MPRINT(EM_DIAGRAM):   end;
35746     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
35747     +      _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
35748     +   end;
MPRINT(EM_DIAGRAM):   end;
35749     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
35750     +      _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
35751     +   end;
MPRINT(EM_DIAGRAM):   end;
35752     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
35753     +      _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
35754     +   end;
MPRINT(EM_DIAGRAM):   end;
35755     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
35756     +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
35757     +      _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
35758     +      _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
35759     +      _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
35760     +      _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
35761     +   end;
MPRINT(EM_DIAGRAM):   end;
35762     +   else do;
MPRINT(EM_DIAGRAM):   else do;
35763     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
35764     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
35765     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
35766     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
35767     +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
35768     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35769     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35770     +   end;
MPRINT(EM_DIAGRAM):   end;
35771     +end;
MPRINT(EM_DIAGRAM):   end;
35772     +
35773     +*** Generate dummy variables for LotSize ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LotSize ;
35774     +drop _4_0 _4_1 ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 ;
35775     +if missing( LotSize ) then do;
MPRINT(EM_DIAGRAM):   if missing( LotSize ) then do;
35776     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
35777     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
35778     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35779     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35780     +end;
MPRINT(EM_DIAGRAM):   end;
35781     +else do;
MPRINT(EM_DIAGRAM):   else do;
35782     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35783     +   _dm12 = put( LotSize , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( LotSize , BEST. );
35784     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
35785     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
35786     +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
35787     +      _4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
35788     +   end;
MPRINT(EM_DIAGRAM):   end;
35789     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
35790     +      _4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
35791     +      _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
35792     +   end;
MPRINT(EM_DIAGRAM):   end;
35793     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
35794     +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
35795     +      _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
35796     +   end;
MPRINT(EM_DIAGRAM):   end;
35797     +   else do;
MPRINT(EM_DIAGRAM):   else do;
35798     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
35799     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
35800     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35801     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35802     +   end;
MPRINT(EM_DIAGRAM):   end;
35803     +end;
MPRINT(EM_DIAGRAM):   end;
35804     +
35805     +*** Generate dummy variables for Neighborhood ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Neighborhood ;
35806     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
35807     +if missing( Neighborhood ) then do;
MPRINT(EM_DIAGRAM):   if missing( Neighborhood ) then do;
35808     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
35809     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35810     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35811     +end;
MPRINT(EM_DIAGRAM):   end;
35812     +else do;
MPRINT(EM_DIAGRAM):   else do;
35813     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35814     +   _dm12 = put( Neighborhood , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Neighborhood , BEST. );
35815     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
35816     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
35817     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
35818     +   end;
MPRINT(EM_DIAGRAM):   end;
35819     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
35820     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
35821     +   end;
MPRINT(EM_DIAGRAM):   end;
35822     +   else do;
MPRINT(EM_DIAGRAM):   else do;
35823     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
35824     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35825     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35826     +   end;
MPRINT(EM_DIAGRAM):   end;
35827     +end;
MPRINT(EM_DIAGRAM):   end;
35828     +
35829     +*** Generate dummy variables for WallType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for WallType ;
35830     +drop _6_0 _6_1 ;
MPRINT(EM_DIAGRAM):   drop _6_0 _6_1 ;
35831     +if missing( WallType ) then do;
MPRINT(EM_DIAGRAM):   if missing( WallType ) then do;
35832     +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
35833     +   _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
35834     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
35835     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35836     +end;
MPRINT(EM_DIAGRAM):   end;
35837     +else do;
MPRINT(EM_DIAGRAM):   else do;
35838     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
35839     +   _dm12 = put( WallType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( WallType , BEST. );
35840     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
35841     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
35842     +      _6_0 = 0;
MPRINT(EM_DIAGRAM):   _6_0 = 0;
35843     +      _6_1 = 1;
MPRINT(EM_DIAGRAM):   _6_1 = 1;
35844     +   end;
MPRINT(EM_DIAGRAM):   end;
35845     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
35846     +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
35847     +      _6_1 = 0;
MPRINT(EM_DIAGRAM):   _6_1 = 0;
35848     +   end;
MPRINT(EM_DIAGRAM):   end;
35849     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
35850     +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
35851     +      _6_1 = -1;
MPRINT(EM_DIAGRAM):   _6_1 = -1;
35852     +   end;
MPRINT(EM_DIAGRAM):   end;
35853     +   else do;
MPRINT(EM_DIAGRAM):   else do;
35854     +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
35855     +      _6_1 = .;
MPRINT(EM_DIAGRAM):   _6_1 = .;
35856     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
35857     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
35858     +   end;
MPRINT(EM_DIAGRAM):   end;
35859     +end;
MPRINT(EM_DIAGRAM):   end;
35860     +
35861     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
35862     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
35863     +   _LP0 =     75984.2752293578;
MPRINT(EM_DIAGRAM):   _LP0 = 75984.2752293578;
35864     +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
35865     +end;
MPRINT(EM_DIAGRAM):   end;
35866     +
35867     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
35868     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
35869     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
35870     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
35871     +
35872     +***  Effect: Age ;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
35873     +_TEMP = Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
35874     +_LP0 = _LP0 + (   -431.936071671528 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -431.936071671528 * _TEMP);
35875     +
35876     +***  Effect: Basement ;
MPRINT(EM_DIAGRAM):   *** Effect: Basement ;
35877     +_TEMP = Basement ;
MPRINT(EM_DIAGRAM):   _TEMP = Basement ;
35878     +_LP0 = _LP0 + (    2.18687828412111 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 2.18687828412111 * _TEMP);
35879     +
35880     +***  Effect: BasementType ;
MPRINT(EM_DIAGRAM):   *** Effect: BasementType ;
35881     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35882     +_LP0 = _LP0 + (   -9160.85317146442) * _TEMP * _0_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -9160.85317146442) * _TEMP * _0_0;
35883     +_LP0 = _LP0 + (    4491.95255674066) * _TEMP * _0_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4491.95255674066) * _TEMP * _0_1;
35884     +
35885     +***  Effect: Baths ;
MPRINT(EM_DIAGRAM):   *** Effect: Baths ;
35886     +_TEMP = Baths ;
MPRINT(EM_DIAGRAM):   _TEMP = Baths ;
35887     +_LP0 = _LP0 + (    471.670852372481 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 471.670852372481 * _TEMP);
35888     +
35889     +***  Effect: CentralAir ;
MPRINT(EM_DIAGRAM):   *** Effect: CentralAir ;
35890     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35891     +_LP0 = _LP0 + (   -1213.32943828199) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1213.32943828199) * _TEMP * _1_0;
35892     +
35893     +***  Effect: ConstructionType ;
MPRINT(EM_DIAGRAM):   *** Effect: ConstructionType ;
35894     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35895     +_LP0 = _LP0 + (   -17878.5942963889) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -17878.5942963889) * _TEMP * _2_0;
35896     +_LP0 = _LP0 + (   -14287.5427047542) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -14287.5427047542) * _TEMP * _2_1;
35897     +
35898     +***  Effect: FirePlace ;
MPRINT(EM_DIAGRAM):   *** Effect: FirePlace ;
35899     +_TEMP = FirePlace ;
MPRINT(EM_DIAGRAM):   _TEMP = FirePlace ;
35900     +_LP0 = _LP0 + (   -1702.40321440209 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1702.40321440209 * _TEMP);
35901     +
35902     +***  Effect: FirstFloor ;
MPRINT(EM_DIAGRAM):   *** Effect: FirstFloor ;
35903     +_TEMP = FirstFloor ;
MPRINT(EM_DIAGRAM):   _TEMP = FirstFloor ;
35904     +_LP0 = _LP0 + (     7.3902914604401 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 7.3902914604401 * _TEMP);
35905     +
35906     +***  Effect: GarageSize ;
MPRINT(EM_DIAGRAM):   *** Effect: GarageSize ;
35907     +_TEMP = GarageSize ;
MPRINT(EM_DIAGRAM):   _TEMP = GarageSize ;
35908     +_LP0 = _LP0 + (    3891.72416970124 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3891.72416970124 * _TEMP);
35909     +
35910     +***  Effect: GarageType ;
MPRINT(EM_DIAGRAM):   *** Effect: GarageType ;
35911     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35912     +_LP0 = _LP0 + (    3417.41210774315) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3417.41210774315) * _TEMP * _3_0;
35913     +_LP0 = _LP0 + (   -801.914423123984) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -801.914423123984) * _TEMP * _3_1;
35914     +_LP0 = _LP0 + (    3383.58879889631) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 3383.58879889631) * _TEMP * _3_2;
35915     +_LP0 = _LP0 + (     6532.9209186196) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6532.9209186196) * _TEMP * _3_3;
35916     +_LP0 = _LP0 + (   -16566.7236017071) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -16566.7236017071) * _TEMP * _3_4;
35917     +
35918     +***  Effect: LotSize ;
MPRINT(EM_DIAGRAM):   *** Effect: LotSize ;
35919     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35920     +_LP0 = _LP0 + (   -174.269009800207) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -174.269009800207) * _TEMP * _4_0;
35921     +_LP0 = _LP0 + (   -8400.20858929302) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -8400.20858929302) * _TEMP * _4_1;
35922     +
35923     +***  Effect: Neighborhood ;
MPRINT(EM_DIAGRAM):   *** Effect: Neighborhood ;
35924     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35925     +_LP0 = _LP0 + (   -828.923780605267) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -828.923780605267) * _TEMP * _5_0;
35926     +
35927     +***  Effect: SecondFloor ;
MPRINT(EM_DIAGRAM):   *** Effect: SecondFloor ;
35928     +_TEMP = SecondFloor ;
MPRINT(EM_DIAGRAM):   _TEMP = SecondFloor ;
35929     +_LP0 = _LP0 + (   -52.9687723273401 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -52.9687723273401 * _TEMP);
35930     +
35931     +***  Effect: TotalArea ;
The SAS System

MPRINT(EM_DIAGRAM):   *** Effect: TotalArea ;
35932     +_TEMP = TotalArea ;
MPRINT(EM_DIAGRAM):   _TEMP = TotalArea ;
35933     +_LP0 = _LP0 + (    9.94109260562379 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 9.94109260562379 * _TEMP);
35934     +
35935     +***  Effect: WallType ;
MPRINT(EM_DIAGRAM):   *** Effect: WallType ;
35936     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
35937     +_LP0 = _LP0 + (   -2473.21138494035) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2473.21138494035) * _TEMP * _6_0;
35938     +_LP0 = _LP0 + (   -2541.97716567457) * _TEMP * _6_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2541.97716567457) * _TEMP * _6_1;
35939     +*--- Intercept ---*;
MPRINT(EM_DIAGRAM):   *--- Intercept ---*;
35940     +_LP0 = _LP0 + (    81836.5530427854);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 81836.5530427854);
35941     +
35942     +REG2DR1:
35943     +
35944     +*** Predicted Value, Error, and Residual;
MPRINT(EM_DIAGRAM):   REG2DR1: *** Predicted Value, Error, and Residual;
35945     +label P_SalePrice = 'Predicted: SalePrice' ;
MPRINT(EM_DIAGRAM):   label P_SalePrice = 'Predicted: SalePrice' ;
35946     +P_SalePrice = _LP0;
MPRINT(EM_DIAGRAM):   P_SalePrice = _LP0;
35947     +
35948     +drop _R;
MPRINT(EM_DIAGRAM):   drop _R;
35949     +if _Y = . then do;
MPRINT(EM_DIAGRAM):   if _Y = . then do;
35950     +   R_SalePrice = .;
MPRINT(EM_DIAGRAM):   R_SalePrice = .;
35951     +end;
MPRINT(EM_DIAGRAM):   end;
35952     +else do;
MPRINT(EM_DIAGRAM):   else do;
35953     +   _R = _Y - _LP0;
MPRINT(EM_DIAGRAM):   _R = _Y - _LP0;
35954     +    label R_SalePrice = 'Residual: SalePrice' ;
MPRINT(EM_DIAGRAM):   label R_SalePrice = 'Residual: SalePrice' ;
35955     +   R_SalePrice = _R;
MPRINT(EM_DIAGRAM):   R_SalePrice = _R;
35956     +end;
MPRINT(EM_DIAGRAM):   end;
35957     +
35958     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
35959     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
35960     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
35961      run;

NOTE: DATA STEP view saved on file EMWS1.REG2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
35962      quit;
35963      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
35964      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
35965      * Reg2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg2: Computing metadata for TRAIN data;
35966      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.REG2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Reg2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg2_TRAIN out=WORK.M05MTA5G noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M05MTA5G;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M05MTA5G(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M05MTA5G;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M05MTA5G;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1WLPPAI NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1WLPPAI;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1WLPPAI;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0BQ8JI3(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1WLPPAI;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1WLPPAI;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1WLPPAI;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1WLPPAI;
MPRINT(EMADVISECOLUMNS):   set WORK.M1WLPPAI;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg2";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_SALEPRICE") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("R_SALEPRICE") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg2";
MPRINT(EM_DIAGRAM):   when("SALEPRICE") model = "Reg2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
36314      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
36315      set EMWS1.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMINFO;
36316      where DATA='Reg2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
36317      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.REG2_EMINFO.
      WHERE (DATA='Reg2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

36318      data EMWS1.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg2_EMINFO;
36319      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
36320      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
36321      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.REG2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   run;
36325      run;
36326      data EMWS1.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_EMINFO;
36327      set EMWS1.Reg2_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMINFO WORK.MODELTEMP_INFO;
36328      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.REG2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.04 seconds
      

36329      proc sort data = EMWS1.Reg2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg2_EMINFO NOTHREADS;
36330      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
36331      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.REG2_EMINFO.
NOTE: The data set EMWS1.REG2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.13 seconds
      cpu time            0.04 seconds
      

NOTE: View EMWS1.REG2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS1.REG2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
