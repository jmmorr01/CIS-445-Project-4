MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:50:10" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 19, 2018
Time:                23:50:10
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2XIL_9Z "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MdlComp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2XIL_9Z new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
      
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.34 seconds
      cpu time            0.32 seconds
      
164508     /* Generate assessment metadata, which will be used to generate assessment data step */
164509     /* code, such as retrieving names of temporary variables and summary variables,      */
164510     /* labels, etc.  It is used in almost all the assessment computations such as lift,  */
164511     /* roc, index, scoreDist and could be thought as a global variable in assessment     */
164512     /* computation.                                                                      */
164513     data work.ASSESS_3ULTPI1_assessMeta_G6fSES;
MPRINT(EM_DIAGRAM):    data work.ASSESS_3ULTPI1_assessMeta_G6fSES;
164514     length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32
164514   ! RESULT_MAX_LABEL
164515        $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX 
$32 RESULT_MAX_LABEL $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
164516     VARIABLE = "SalePrice";
MPRINT(EM_DIAGRAM):   VARIABLE = "SalePrice";
164517     PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
164518     FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
164519     TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
164520     LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
164521     PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
164522     MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
164523     LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
164524     GEN_VAR_IN_TEMP_DATA = "SalePrice";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "SalePrice";
164525     RESULT_MEAN = "_targetMean_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_targetMean_";
164526     RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Target";
164527     RESULT_MIN = "_targetMin_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_targetMin_";
164528     RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Target";
164529     MIN_ADJUSTED = "SalePric_minAdjusted_UfTYfljTg";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "SalePric_minAdjusted_UfTYfljTg";
164530     RESULT_MAX = "_targetMax_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_targetMax_";
164531     RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_trgtMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Target";
164532     MAX_ADJUSTED = "SalePric_maxAdjusted_6wp7FnRqM";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "SalePric_maxAdjusted_6wp7FnRqM";
164533     RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
164534     RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
164535     TEMPORARY_VARIABLE = "SalePrice_cOr5FVveUyhs2lO";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "SalePrice_cOr5FVveUyhs2lO";
164536     output;
MPRINT(EM_DIAGRAM):   output;
164537     VARIABLE = "P_SalePrice";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_SalePrice";
164538     FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
164539     TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
164540     PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
164541     LEVEL = "";
MPRINT(EM_DIAGRAM):   LEVEL = "";
164542     PROPERTY = "PREDICTED";
MPRINT(EM_DIAGRAM):   PROPERTY = "PREDICTED";
164543     MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
164544     LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
164545     GEN_VAR_IN_TEMP_DATA = "P_SalePrice";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_SalePrice";
164546     RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
164547     RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Predicted";
164548     RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
164549     RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
164550     MIN_ADJUSTED = "P_SalePr_minAdjusted_bqjPL_KKl";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_SalePr_minAdjusted_bqjPL_KKl";
164551     RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Predicted";
164552     RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
164553     RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_predMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Predicted";
164554     MAX_ADJUSTED = "max_adjusted";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "max_adjusted";
164555     RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
164556     RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
164557     TEMPORARY_VARIABLE = "P_SalePrice_KO5m5Zhoq0BXXPh";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_SalePrice_KO5m5Zhoq0BXXPh";
164558     output;
MPRINT(EM_DIAGRAM):   output;
164559     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.ASSESS_3ULTPI1_ASSESSMETA_G6FSES has 2 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

164560     /* Generate temporary dataset and obtain summary statistics such as total number of   */
164561     /* obserations, frequency of target.  However, summary statistics for class reporting */
164562     /* variabels are not computed here since if there exist class reporting variables,    */
164563     /* then PROC DMDB will be called. And there is no need to compute interval reporting  */
164564     /* summary statisitcs, if any.                                                        */
164565     data work.ASSESS_3ULTPI1_normSD_vG8ONT(drop=
164566     _numberOfObservation_
164567     _intervalTargetMin_ _intervalTargetMax_
164568     )
164569     work.ASSESS_3ULTPI1_meansAndTi__yLgfq (keep=
164570     _numberOfObservation_
164571     _intervalTargetMin_ _intervalTargetMax_
164572     );
MPRINT(EM_DIAGRAM):    data work.ASSESS_3ULTPI1_normSD_vG8ONT(drop= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ ) work.ASSESS_3ULTPI1_meansAndTi__yLgfq (keep= _numberOfObservation_ _intervalTargetMin_ _intervalTargetMax_ );
164573     set EMWS1.Neural_TRAIN(
164574     where=(
164575     (SalePrice ^= .)
164576     and (P_SalePrice ^= .)
164577     )
164578     ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_TRAIN( where=( (SalePrice ^= .) and (P_SalePrice ^= .) ) ) end=_lastObservation_;
164579     keep frequency_ZuQYFg;
MPRINT(EM_DIAGRAM):   keep frequency_ZuQYFg;
164580     frequency_ZuQYFg = 1;
MPRINT(EM_DIAGRAM):   frequency_ZuQYFg = 1;
164581     keep SalePrice;
MPRINT(EM_DIAGRAM):   keep SalePrice;
164582     keep P_SalePrice;
MPRINT(EM_DIAGRAM):   keep P_SalePrice;
164583     output work.ASSESS_3ULTPI1_normSD_vG8ONT;
MPRINT(EM_DIAGRAM):   output work.ASSESS_3ULTPI1_normSD_vG8ONT;
164584     keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
164585     retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
164586     _numberOfObservation_ + frequency_ZuQYFg;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_ZuQYFg;
164587     keep _intervalTargetMin_ _intervalTargetMax_;
MPRINT(EM_DIAGRAM):   keep _intervalTargetMin_ _intervalTargetMax_;
164588     retain _intervalTargetMin_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMin_ .;
164589     retain _intervalTargetMax_ .;
MPRINT(EM_DIAGRAM):   retain _intervalTargetMax_ .;
164590     if (_n_ = 1) then do;
MPRINT(EM_DIAGRAM):   if (_n_ = 1) then do;
164591     _intervalTargetMin_ = P_SalePrice;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_SalePrice;
164592     _intervalTargetMax_ = P_SalePrice;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_SalePrice;
164593     end;
MPRINT(EM_DIAGRAM):   end;
164594     else do;
MPRINT(EM_DIAGRAM):   else do;
164595     if (_intervalTargetMin_ > P_SalePrice) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMin_ > P_SalePrice) then do;
164596     _intervalTargetMin_ = P_SalePrice;
MPRINT(EM_DIAGRAM):   _intervalTargetMin_ = P_SalePrice;
164597     end;
MPRINT(EM_DIAGRAM):   end;
164598     if (_intervalTargetMax_ < P_SalePrice) then do;
MPRINT(EM_DIAGRAM):   if (_intervalTargetMax_ < P_SalePrice) then do;
164599     _intervalTargetMax_ = P_SalePrice;
MPRINT(EM_DIAGRAM):   _intervalTargetMax_ = P_SalePrice;
164600     end;
MPRINT(EM_DIAGRAM):   end;
164601     end;
MPRINT(EM_DIAGRAM):   end;
164602     if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
164603     output work.ASSESS_3ULTPI1_meansAndTi__yLgfq;
MPRINT(EM_DIAGRAM):   output work.ASSESS_3ULTPI1_meansAndTi__yLgfq;
164604     end;
MPRINT(EM_DIAGRAM):   end;
164605     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 218 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 193 observations read from the data set EMWS1.FILTER_TRAIN.
NOTE: There were 193 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 193 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.19 seconds
      cpu time            0.20 seconds
      
NOTE: There were 193 observations read from the data set EMWS1.BINNING_TRAIN.
NOTE: There were 193 observations read from the data set EMWS1.NEURAL_TRAIN.
      WHERE (SalePrice not = .) and (P_SalePrice not = .);
NOTE: The data set WORK.ASSESS_3ULTPI1_NORMSD_VG8ONT has 193 observations and 3 variables.
NOTE: The data set WORK.ASSESS_3ULTPI1_MEANSANDTI__YLGFQ has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.23 seconds
      cpu time            0.23 seconds
      

164606     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
164607     set EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK;
164608     where MODEL = "Neural" and TARGET = "SalePrice" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Neural" and TARGET = "SalePrice" and dataRole="TRAIN";
164609     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.MDLCOMP_EMRANK.
      WHERE (MODEL='Neural') and (TARGET='SalePrice') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

164610     data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
164611     do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
164612     DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
164613     output;
MPRINT(EM_DIAGRAM):   output;
164614     end;
MPRINT(EM_DIAGRAM):   end;
164615     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

164616     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
164617     merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
164618     by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
164619     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 15 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

164620     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
164621     set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
164622     retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
164623     retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
164624     keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
164625     if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
164626     bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
164627     _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
164628     if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
164629     /* tied */
164630     _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
164631     ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
164632     end;
MPRINT(EM_DIAGRAM):   end;
164633     else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
164634     /* next tied */
164635     _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
164636     ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ ));
164637     end;
MPRINT(EM_DIAGRAM):   end;
164638     output;
MPRINT(EM_DIAGRAM):   output;
164639     *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
164640     * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
164641     *end;
MPRINT(EM_DIAGRAM):   *end;
164642     if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
164643     _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
164644     end;
MPRINT(EM_DIAGRAM):   end;
164645     else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
164646     if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
164647     _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
164648     end;
MPRINT(EM_DIAGRAM):   end;
164649     end;
MPRINT(EM_DIAGRAM):   end;
164650     bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
164651     /* correct the previous change */
164652     end;
MPRINT(EM_DIAGRAM):   end;
164653     if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
164654     _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
164655     output;
MPRINT(EM_DIAGRAM):   output;
164656     end;
MPRINT(EM_DIAGRAM):   end;
164657     _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
164658     _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
164659     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

164660     data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
164661     set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
164662     by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
164663     retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
164664     if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
164665     _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
164666     end;
MPRINT(EM_DIAGRAM):   end;
164667     if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
164668     _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
164669     output;
MPRINT(EM_DIAGRAM):   output;
164670     end;
MPRINT(EM_DIAGRAM):   end;
164671     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

164672     filename emflow "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring NEURAL_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
164673     *------------------------------------------------------------*;
164674     * MdlComp: Scoring NEURAL_TRAIN data;
164675     *------------------------------------------------------------*;
164676     data EMWS1.MdlComp_TRAIN
164677     / view=EMWS1.MdlComp_TRAIN
164678     ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_TRAIN / view=EMWS1.MdlComp_TRAIN ;
164679     set EMWS1.Neural_TRAIN
164680     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_TRAIN ;
164681     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
164682    +if (P_SalePrice ge 81614.3947762909) then do;
MPRINT(EM_DIAGRAM):   if (P_SalePrice ge 81614.3947762909) then do;
164683    +b_SalePrice = 1;
MPRINT(EM_DIAGRAM):   b_SalePrice = 1;
164684    +end;
MPRINT(EM_DIAGRAM):   end;
164685    +else
164686    +if (P_SalePrice ge 81075.545866676) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 81075.545866676) then do;
164687    +b_SalePrice = 2;
MPRINT(EM_DIAGRAM):   b_SalePrice = 2;
164688    +end;
MPRINT(EM_DIAGRAM):   end;
164689    +else
164690    +if (P_SalePrice ge 79319.0086425757) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 79319.0086425757) then do;
164691    +b_SalePrice = 3;
MPRINT(EM_DIAGRAM):   b_SalePrice = 3;
164692    +end;
MPRINT(EM_DIAGRAM):   end;
164693    +else
164694    +if (P_SalePrice ge 78521.7370272021) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 78521.7370272021) then do;
164695    +b_SalePrice = 4;
MPRINT(EM_DIAGRAM):   b_SalePrice = 4;
164696    +end;
MPRINT(EM_DIAGRAM):   end;
164697    +else
164698    +if (P_SalePrice ge 76740.3248581813) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 76740.3248581813) then do;
164699    +b_SalePrice = 5;
MPRINT(EM_DIAGRAM):   b_SalePrice = 5;
164700    +end;
MPRINT(EM_DIAGRAM):   end;
164701    +else
164702    +if (P_SalePrice ge 76693.3879846464) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 76693.3879846464) then do;
164703    +b_SalePrice = 6;
MPRINT(EM_DIAGRAM):   b_SalePrice = 6;
164704    +end;
MPRINT(EM_DIAGRAM):   end;
164705    +else
164706    +if (P_SalePrice ge 76505.642545364) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 76505.642545364) then do;
164707    +b_SalePrice = 7;
MPRINT(EM_DIAGRAM):   b_SalePrice = 7;
164708    +end;
MPRINT(EM_DIAGRAM):   end;
164709    +else
164710    +if (P_SalePrice ge 76493.4594951767) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 76493.4594951767) then do;
164711    +b_SalePrice = 8;
MPRINT(EM_DIAGRAM):   b_SalePrice = 8;
164712    +end;
MPRINT(EM_DIAGRAM):   end;
164713    +else
164714    +if (P_SalePrice ge 76473.530527708) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 76473.530527708) then do;
164715    +b_SalePrice = 9;
MPRINT(EM_DIAGRAM):   b_SalePrice = 9;
164716    +end;
MPRINT(EM_DIAGRAM):   end;
164717    +else
164718    +if (P_SalePrice ge 74492.8609321893) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 74492.8609321893) then do;
164719    +b_SalePrice = 10;
MPRINT(EM_DIAGRAM):   b_SalePrice = 10;
164720    +end;
MPRINT(EM_DIAGRAM):   end;
164721    +else
164722    +if (P_SalePrice ge 74385.5161934523) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 74385.5161934523) then do;
164723    +b_SalePrice = 11;
MPRINT(EM_DIAGRAM):   b_SalePrice = 11;
164724    +end;
MPRINT(EM_DIAGRAM):   end;
164725    +else
164726    +if (P_SalePrice ge 74239.7769382325) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 74239.7769382325) then do;
164727    +b_SalePrice = 12;
MPRINT(EM_DIAGRAM):   b_SalePrice = 12;
164728    +end;
MPRINT(EM_DIAGRAM):   end;
164729    +else
164730    +if (P_SalePrice ge 73331.9494319469) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 73331.9494319469) then do;
164731    +b_SalePrice = 13;
MPRINT(EM_DIAGRAM):   b_SalePrice = 13;
164732    +end;
MPRINT(EM_DIAGRAM):   end;
164733    +else
164734    +if (P_SalePrice ge 72162.3437993688) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 72162.3437993688) then do;
164735    +b_SalePrice = 14;
MPRINT(EM_DIAGRAM):   b_SalePrice = 14;
164736    +end;
MPRINT(EM_DIAGRAM):   end;
164737    +else
164738    +if (P_SalePrice ge 72131.4189170731) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 72131.4189170731) then do;
164739    +b_SalePrice = 15;
MPRINT(EM_DIAGRAM):   b_SalePrice = 15;
164740    +end;
MPRINT(EM_DIAGRAM):   end;
164741    +else
164742    +if (P_SalePrice ge 71626.774471511) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 71626.774471511) then do;
164743    +b_SalePrice = 16;
MPRINT(EM_DIAGRAM):   b_SalePrice = 16;
164744    +end;
MPRINT(EM_DIAGRAM):   end;
164745    +else
164746    +if (P_SalePrice ge 69393.1061130267) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 69393.1061130267) then do;
164747    +b_SalePrice = 17;
MPRINT(EM_DIAGRAM):   b_SalePrice = 17;
164748    +end;
MPRINT(EM_DIAGRAM):   end;
164749    +else
164750    +if (P_SalePrice ge 68750.1421138033) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 68750.1421138033) then do;
164751    +b_SalePrice = 18;
MPRINT(EM_DIAGRAM):   b_SalePrice = 18;
164752    +end;
MPRINT(EM_DIAGRAM):   end;
164753    +else
164754    +if (P_SalePrice ge 68743.6989474739) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 68743.6989474739) then do;
164755    +b_SalePrice = 19;
MPRINT(EM_DIAGRAM):   b_SalePrice = 19;
164756    +end;
MPRINT(EM_DIAGRAM):   end;
164757    +else
164758    +do;
MPRINT(EM_DIAGRAM):   else do;
164759    +b_SalePrice = 20;
MPRINT(EM_DIAGRAM):   b_SalePrice = 20;
164760    +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
164761     run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.18 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.23 seconds
      cpu time            0.18 seconds
      

MPRINT(EM_DIAGRAM):   quit;
164762     quit;
164763     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
164764     filename emflow "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring NEURAL_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
164765     *------------------------------------------------------------*;
164766     * MdlComp: Scoring NEURAL_VALIDATE data;
164767     *------------------------------------------------------------*;
164768     data EMWS1.MdlComp_VALIDATE
164769     / view=EMWS1.MdlComp_VALIDATE
164770     ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_VALIDATE / view=EMWS1.MdlComp_VALIDATE ;
164771     set EMWS1.Neural_VALIDATE
164772     ;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_VALIDATE ;
164773     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
164774    +if (P_SalePrice ge 81614.3947762909) then do;
MPRINT(EM_DIAGRAM):   if (P_SalePrice ge 81614.3947762909) then do;
164775    +b_SalePrice = 1;
MPRINT(EM_DIAGRAM):   b_SalePrice = 1;
164776    +end;
MPRINT(EM_DIAGRAM):   end;
164777    +else
164778    +if (P_SalePrice ge 81075.545866676) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 81075.545866676) then do;
164779    +b_SalePrice = 2;
MPRINT(EM_DIAGRAM):   b_SalePrice = 2;
164780    +end;
MPRINT(EM_DIAGRAM):   end;
164781    +else
164782    +if (P_SalePrice ge 79319.0086425757) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 79319.0086425757) then do;
164783    +b_SalePrice = 3;
MPRINT(EM_DIAGRAM):   b_SalePrice = 3;
164784    +end;
MPRINT(EM_DIAGRAM):   end;
164785    +else
164786    +if (P_SalePrice ge 78521.7370272021) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 78521.7370272021) then do;
164787    +b_SalePrice = 4;
MPRINT(EM_DIAGRAM):   b_SalePrice = 4;
164788    +end;
MPRINT(EM_DIAGRAM):   end;
164789    +else
164790    +if (P_SalePrice ge 76740.3248581813) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 76740.3248581813) then do;
164791    +b_SalePrice = 5;
MPRINT(EM_DIAGRAM):   b_SalePrice = 5;
164792    +end;
MPRINT(EM_DIAGRAM):   end;
164793    +else
164794    +if (P_SalePrice ge 76693.3879846464) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 76693.3879846464) then do;
164795    +b_SalePrice = 6;
MPRINT(EM_DIAGRAM):   b_SalePrice = 6;
164796    +end;
MPRINT(EM_DIAGRAM):   end;
164797    +else
164798    +if (P_SalePrice ge 76505.642545364) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 76505.642545364) then do;
164799    +b_SalePrice = 7;
MPRINT(EM_DIAGRAM):   b_SalePrice = 7;
164800    +end;
MPRINT(EM_DIAGRAM):   end;
164801    +else
164802    +if (P_SalePrice ge 76493.4594951767) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 76493.4594951767) then do;
164803    +b_SalePrice = 8;
MPRINT(EM_DIAGRAM):   b_SalePrice = 8;
164804    +end;
MPRINT(EM_DIAGRAM):   end;
164805    +else
164806    +if (P_SalePrice ge 76473.530527708) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 76473.530527708) then do;
164807    +b_SalePrice = 9;
MPRINT(EM_DIAGRAM):   b_SalePrice = 9;
164808    +end;
MPRINT(EM_DIAGRAM):   end;
164809    +else
164810    +if (P_SalePrice ge 74492.8609321893) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 74492.8609321893) then do;
164811    +b_SalePrice = 10;
MPRINT(EM_DIAGRAM):   b_SalePrice = 10;
164812    +end;
MPRINT(EM_DIAGRAM):   end;
164813    +else
164814    +if (P_SalePrice ge 74385.5161934523) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 74385.5161934523) then do;
164815    +b_SalePrice = 11;
MPRINT(EM_DIAGRAM):   b_SalePrice = 11;
164816    +end;
MPRINT(EM_DIAGRAM):   end;
164817    +else
164818    +if (P_SalePrice ge 74239.7769382325) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 74239.7769382325) then do;
164819    +b_SalePrice = 12;
MPRINT(EM_DIAGRAM):   b_SalePrice = 12;
164820    +end;
MPRINT(EM_DIAGRAM):   end;
164821    +else
164822    +if (P_SalePrice ge 73331.9494319469) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 73331.9494319469) then do;
164823    +b_SalePrice = 13;
MPRINT(EM_DIAGRAM):   b_SalePrice = 13;
164824    +end;
MPRINT(EM_DIAGRAM):   end;
164825    +else
164826    +if (P_SalePrice ge 72162.3437993688) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 72162.3437993688) then do;
164827    +b_SalePrice = 14;
MPRINT(EM_DIAGRAM):   b_SalePrice = 14;
164828    +end;
MPRINT(EM_DIAGRAM):   end;
164829    +else
164830    +if (P_SalePrice ge 72131.4189170731) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 72131.4189170731) then do;
164831    +b_SalePrice = 15;
MPRINT(EM_DIAGRAM):   b_SalePrice = 15;
164832    +end;
MPRINT(EM_DIAGRAM):   end;
164833    +else
164834    +if (P_SalePrice ge 71626.774471511) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 71626.774471511) then do;
164835    +b_SalePrice = 16;
MPRINT(EM_DIAGRAM):   b_SalePrice = 16;
164836    +end;
MPRINT(EM_DIAGRAM):   end;
164837    +else
164838    +if (P_SalePrice ge 69393.1061130267) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 69393.1061130267) then do;
164839    +b_SalePrice = 17;
MPRINT(EM_DIAGRAM):   b_SalePrice = 17;
164840    +end;
MPRINT(EM_DIAGRAM):   end;
164841    +else
164842    +if (P_SalePrice ge 68750.1421138033) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 68750.1421138033) then do;
164843    +b_SalePrice = 18;
MPRINT(EM_DIAGRAM):   b_SalePrice = 18;
164844    +end;
MPRINT(EM_DIAGRAM):   end;
164845    +else
164846    +if (P_SalePrice ge 68743.6989474739) then do;
MPRINT(EM_DIAGRAM):   else if (P_SalePrice ge 68743.6989474739) then do;
164847    +b_SalePrice = 19;
MPRINT(EM_DIAGRAM):   b_SalePrice = 19;
164848    +end;
MPRINT(EM_DIAGRAM):   end;
164849    +else
164850    +do;
MPRINT(EM_DIAGRAM):   else do;
164851    +b_SalePrice = 20;
MPRINT(EM_DIAGRAM):   b_SalePrice = 20;
164852    +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
164853     run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.23 seconds
      cpu time            0.17 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.23 seconds
      cpu time            0.17 seconds
      

MPRINT(EM_DIAGRAM):   quit;
164854     quit;
164855     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
164856     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
164857     * MdlComp: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp: Computing metadata for TRAIN data;
164858     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.19 seconds
      cpu time            0.18 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.MdlComp_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.MdlComp_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.MdlComp_TRAIN out=WORK.M3MHF7FJ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3MHF7FJ;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3MHF7FJ(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3MHF7FJ;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3MHF7FJ;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3K_P2E9 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3K_P2E9;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3K_P2E9;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1KY6LLO(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3K_P2E9;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3K_P2E9;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3K_P2E9;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3K_P2E9;
MPRINT(EMADVISECOLUMNS):   set WORK.M3K_P2E9;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Neural_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Neural_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.18 seconds
      cpu time            0.18 seconds
      
NOTE: View EMWS1.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.21 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
