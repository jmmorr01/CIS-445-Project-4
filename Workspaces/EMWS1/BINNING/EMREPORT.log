MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:48:31" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                November 19, 2018
Time:                23:48:31
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O095XPTS "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O095XPTS new;
MPRINT(EM_DIAGRAM):   run;
110687     %let EMEXCEPTIONSTRING=;
110688     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
110689     * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
110690     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
110691     %let EM_ACTION = REPORT;
110692     %let syscc = 0;
110693     %macro main;
110694     
110695       filename temp catalog 'sashelp.emmdfy.binning_macros.source';
110696       %include temp;
110697       filename temp;
110698     
110699       %setProperties;
110700     
110701       %if %upcase(&EM_ACTION) = CREATE %then %do;
110702         filename temp catalog 'sashelp.emmdfy.binning_create.source';
110703         %include temp;
110704         filename temp;
110705     
110706         %create;
110707       %end;
110708     
110709        %else
110710        %if %upcase(&EM_ACTION) = TRAIN %then %do;
110711     
110712            filename temp catalog 'sashelp.emmdfy.binning_train.source';
110713            %include temp;
110714            filename temp;
110715            %train;
110716        %end;
110717     
110718       %else
110719       %if %upcase(&EM_ACTION) = SCORE %then %do;
110720         filename temp catalog 'sashelp.emmdfy.binning_score.source';
110721         %include temp;
110722         filename temp;
110723     
110724         %score;
110725     
110726       %end;
110727     
110728       %else
110729       %if %upcase(&EM_ACTION) = REPORT %then %do;
110730     
110731            filename temp catalog 'sashelp.emmdfy.binning_report.source';
110732            %include temp;
110733            filename temp;
110734     
110735            %report;
110736        %end;
110737     
110738        %doendm:
110739     %mend main;
110740     
110741     %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
110743    +%macro SetProperties;
110745    +     /* IGN options */
110746    +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
110747    +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
110748    +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
110750    +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
110751    +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
110752    +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
110753    +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
110754    +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
110755    +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
110756    +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
110757    +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
110758    +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
110759    +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
110760    +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
110761    +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
110762    +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
110763    +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
110765    +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
110766    +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
110767    +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
110770    +%mend SetProperties;
110771    +%macro appendfiles(fileref1, fileref2);
110772    +     data _null_;
110773    +       length c $256;
110774    +       fid1=fopen("&fileref1",'A');
110775    +       fid2=fopen("&fileref2",'I');
110776    +       cval = finfo(fid2,'lrecl');
110777    +       put cval= fid1= fid2=;
110778    +       if (fid2 > 0) then
110779    +         do while(fread(fid2)=0);
110780    +           rc = fget(fid2,c,256);
110781    +           _msg_=sysmsg();
110782    +           /* put rc= c= _msg_=; */
110783    +           rc = fput(fid1,strip(c));
110784    +           rc = fwrite(fid1);
110785    +         end;
110786    +         _msg_=sysmsg();
110787    +         put _msg_=;
110788    +       rc = fclose(fid1);
110789    +       rc = fclose(fid2);
110790    +     run;
110791    +%mend appendfiles;
110793    +%macro buildOptScoreCode;
110795    +    %em_register(key=BINCODE, type=FOLDER);
110797    +    filename x catalog 'sashelp.emutil.em_deldir.source';
110798    +    %inc x;
110799    +    filename x;
110800    +    %delDir(folder=%nrbquote(&em_user_bincode));
110802    +    data _null_; length rc $200;
110803    +       rc = dcreate('BINCODE', "&EM_NODEDIR");
110804    +    run;
110806    +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
110808    +    %let dsid = %sysfunc(open(class_nosv));
110809    +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
110810    +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
110812    +    %let oldname=;
110813    +    %do %while(^%sysfunc(fetch(&dsid)));
110814    +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
110815    +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
110817    +        %if &name ne &oldname %then %do;
110818    +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
110819    +             data _null_;
110820    +                length string $200 flag endflag 8;
110821    +                retain string flag endflag;
110822    +                set class_nosv end=eof;
110823    +                where DISPLAY_VAR ="&name";
110824    +                by _variable_ _group_;
110825    +                file _F1;
110826    +                index = kindex(_variable_, "BIN_");
110827    +                if index gt 0 then do;
110828    +                   if first._variable_ then do;
110829    +                      put ' ';
110830    +                      put "&EM_CODEBAR;";
110831    +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
110832    +                      put string;
110833    +                      put "&EM_CODEBAR;";
110835    +                      if origLabel ne "" then do;
110836    +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
110837    +                            put string;
110838    +                            string = tranwrd(origLabel,"'","''");
110839    +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
110840    +                            put string;
110841    +                      end;
110842    +                      else do;
110843    +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
110844    +                             put string;
110845    +                      end;
110847    +                      put ' ';
110849    +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
110850    +                      put string;
110851    +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
110852    +                      put string;
110853    +                      put "end;";
110854    +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
110855    +                      put string;
110856    +                   end;
110857    +                   if first._group_ then do;
110858    +                      flag = 0;
110859    +                      endflag = 1;
110860    +                      if ^first._variable_ then do;
110861    +                         put "else";
110862    +                      end;
110863    +                      if LB ne . then do;
110864    +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
110865    +                      end;
110866    +                      else do;
110867    +                         flag = 1;
110868    +                         string = "if";
110869    +                      end;
110870    +                   end;
110871    +                   if last._Group_ then do;
110872    +                      if UB ne . then do;
110873    +                        if flag ne 1 then do;
110874    +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
110875    +                        end;
110876    +                        else do;
110877    +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
110878    +                        end;
110879    +                      end;
110880    +                      else do;
110881    +                         if flag=1 then do;
110882    +                            string = strip(DISPLAY_VAR) ;
110883    +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
110884    +                            endflag=0;
110885    +                            string="";
110886    +                         end;
110887    +                         else do;
110888    +                            string = strip(string)!!" then do;";
110889    +                         end;
110890    +                      end;
110891    +                      put string;
110892    +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
110893    +                      put string;
110894    +                      if endflag eq 1 then do;
110895    +                        put "end;";
110896    +                      end;
110897    +                   end;
110898    +                   if last._variable_ then do;
110899    +                     string = "end;";
110900    +                     put string;
110901    +                   end;
110903    +                end;
110904    +                else do;
110905    +                   _split_value_ = tranwrd(_split_value_,"'","''");
110906    +                   if first._group_ then do;
110907    +                      flag=0;
110908    +                      if ^first._variable_ then
110909    +                         put 'else';
110910    +                      else do;
110911    +                         put ' ';
110912    +                         put "&EM_CODEBAR;";
110913    +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
110914    +                         put string;
110915    +                         put "&EM_CODEBAR;";
110917    +                         if origLabel ne "" then do;
110918    +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
110919    +                               put string;
110920    +                               string = tranwrd(origLabel,"'","''");
110921    +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
110922    +                               put string;
110923    +                         end;
110924    +                         else do;
110925    +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
110926    +                               put string;
110927    +                         end;
110929    +                         put ' ';
110931    +                         if format ne '' then do;
110932    +                            if first._variable_ then do;
110933    +                               string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
110934    +                               put string;
110935    +                               string = '%dmnormip(_UFormat);';
110936    +                               put string;
110938    +                               string ="if MISSING(_UFORMAT) then do;";
110939    +                               put string;
110940    +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
110941    +                               put string;
110942    +                               put "end;";
110944    +                               string="else if NOT MISSING(_UFORMAT) then do;";
110945    +                               put string;
110947    +                            end;
110948    +                         end;
110949    +                         else do;
110950    +                            if type = 'N' then do;
110951    +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
110952    +                              put string;
110953    +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
110954    +                              put string;
110955    +                              put "end;";
110957    +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
110958    +                              put string;
110959    +                            end;
110960    +                            else if type='C' then do;
110961    +                              string = "_UFormat = "||strip(DISPLAY_VAR)||";";
110962    +                              put string;
110963    +                              string = '%dmnormip(_UFormat);';
110964    +                              put string;
110966    +                              string ="if MISSING(_UFORMAT) then do;";
110967    +                              put string;
110968    +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
110969    +                              put string;
110970    +                              put "end;";
110972    +                              string="else if NOT MISSING(_UFORMAT) then do;";
110973    +                              put string;
110974    +                              string = '%dmnormip(_UFormat);';
110975    +                              put string;
110976    +                           end;
110977    +                         end;
110978    +                      end;
110979    +                      if format ne '' OR type='C' then do;
110980    +                        string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
110981    +                      end;
110982    +                      else do;
110983    +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
110984    +                      end;
110985    +                   end;
110986    +                   else do;
110987    +                      if flag ne 1 then do;
110988    +                       if format ne '' OR type='C' then do;
110989    +                         tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
110990    +                       end;
110991    +                       else do;
110992    +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
110993    +                       end;
110994    +                         length = length(tempstring);
110996    +                         if length < 195 then do;
110997    +                            string = tempstring;
110998    +                         end;
110999    +                         else do;
111001    +                            string = strip(string);
111002    +                            put string;
111003    +                            string = ") then do;";
111004    +                            put string;
111006    +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
111007    +                            put string;
111008    +                            put "end;";
111010    +                            put 'else';
111011    +                            if format ne '' OR type='C' then do;
111012    +                              string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
111013    +                            end;
111014    +                            else do;
111015    +                              string = "if "!!strip(DISPLAY_VAR)!!" eq ("!!strip(_split_value_);
111016    +                            end;
111017    +                         end;
111018    +                      end;
111019    +                   end;
111021    +                   if last._group_ then do;
111022    +                      string = strip(string);
111023    +                      put string;
111025    +                      string = ") then do;";
111026    +                      put string;
111028    +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
111029    +                      put string;
111030    +                      put "end;";
111031    +                   end;
111033    +                   if last._variable_ then do;
111034    +                     put "else do;";
111036    +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
111037    +                     put string;
111039    +                     put "end;";
111040    +                     put "end;";
111041    +                   end;
111042    +                end;
111043    +             run;
111045    +             %let oldname = &name;
111046    +        %end;
111047    +    %end;
111048    +    %let dsid = %sysfunc(close(&dsid));
111050    +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
111051    +    data _null_;
111052    +       file _F1;
111053    +       put "length _UFormat $200;";
111054    +       put "drop _UFormat;";
111055    +       put "_UFormat='';";
111056    +    run;
111057    +    filename _F1;
111059    +   %em_register(key=EMSCOREVAR, type=DATA);
111060    +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
111061    +   proc datasets lib=&em_lib nolist;
111062    +      delete &scorevarDs;
111063    +   run;
111064    +   quit;
111066    +   %let filrf=mydir;
111067    +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
111068    +   %let did=%sysfunc(dopen(&filrf));
111070    +   %if &did %then %do;  %PUT  did= &did;
111071    +       %let memcount=%sysfunc(dnum(&did));
111072    +       %if &memcount > 0 %then %do;
111073    +           data &em_user_emscorevar;
111074    +              length Name $32 formula $70 file $200;
111075    +              keep NAME Formula file;
111076    +              formula  = '';
111077    +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
111078    +               name=''; file="BINCODE&em_dsep._ALL_.sas";
111079    +               output;
111080    +           %end;
111081    +           %do i=1 %to &memcount;
111082    +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
111083    +               %let newvar = %scan(&name, 1, .);
111084    +               %if "&newvar" ne "_ALL_" %then %do;
111085    +                   name = "&newvar"; file="BINCODE&em_dsep&name";
111086    +                   output;
111087    +               %end;
111088    +           %end;
111090    +           run;
111091    +       %end;
111092    +       %let did = %sysfunc(dclose(&did));
111093    +  %end;
111095    +   %doendu:
111096    +%mend buildOptScoreCode;
111099    +%macro buildScoreCode(flowCode, publishCode);
111102    +  filename x "&flowCode";
111104    +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
111105    +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
111106    +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
111108    +  data temp;
111109    +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
111110    +    by display_var _Split_value_;
111111    +     if upcase(_Split_value_) ne 'MISSING';
111112    +   run;
111114    +   data temp_missing;
111115    +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
111116    +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
111117    +     by display_var _Split_value_;
111118    +     if upcase(_Split_value_) eq 'MISSING';
111119    +     keep _variable_ display_var missgrp;
111120    +   run;
111122    +   proc sort data=temp_missing; by display_var missgrp; run;
111124    +   data temp_missing;
111125    +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
111126    +     by display_var missgrp;
111127    +     if ^_a then delete;
111128    +     keep _variable_ display_var missgrp ;
111129    +   run;
111131    +   data temp;
111132    +     merge temp temp_missing;
111133    +     by display_var;
111134    +     if display_Var eq '' then delete;
111135    +    run;
111137    +    /* pull in wtev values */
111138    +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
111139    +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
111140    +    proc sort data=temp;  by display_var _group_; run;
111142    +   data temp;
111143    +      merge temp tempcoarse(keep=display_var _group_  role) ;
111144    +      by display_var _group_;
111145    +    run;
111147    +    data temp;
111148    +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
111149    +      by display_var;
111151    +      if _group_ = . then delete;
111152    +      if _variable_ = '' then delete;
111153    +    run;
111155    +    proc sort data=temp out=class;
111156    +       by _variable_ _group_ LB;
111157    +    run;
111159    +    data _null_;
111160    +      file X;
111162    +      put "length _UFormat $200;";
111163    +      put "drop _UFormat;";
111164    +      put "_UFormat='';";
111165    +    run;
111167    +    data class_nosv;
111168    +      set class;
111169    +      if upcase(role)="INPUT";
111170    +    run;
111172    +    data _null_;
111173    +       file X MOD;
111174    +       length string $200 flag endflag 8;
111175    +       retain string flag endflag;
111176    +       set class_nosv end=eof;
111177    +       by _variable_ _group_;
111179    +       index = kindex(_variable_, "BIN_");
111180    +       if index gt 0 then do;
111182    +         if first._variable_ then do;
111183    +            put ' ';
111184    +            put "&EM_CODEBAR;";
111185    +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
111186    +            put string;
111187    +            put "&EM_CODEBAR;";
111190    +            if origLabel ne "" then do;
111191    +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
111192    +              put string;
111193    +              string = tranwrd(origLabel,"'","''");
111194    +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
111195    +              put string;
111196    +            end;
111197    +            else do;
111198    +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
111199    +             put string;
111200    +            end;
111202    +            put ' ';
111204    +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
111205    +            put string;
111206    +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
111207    +            put string;
111208    +            put "end;";
111209    +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
111210    +            put string;
111211    +          end;
111212    +           if first._group_ then do;
111213    +              flag = 0;
111214    +              endflag = 1;
111215    +              if ^first._variable_ then do;
111216    +                put "else";
111217    +              end;
111218    +              if LB ne . then do;
111219    +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
111220    +              end;
111221    +              else do;
111222    +                 flag = 1;
111223    +                 string = "if";
111224    +              end;
111226    +           end;
111227    +           if last._Group_ then do;
111228    +              if UB ne . then do;
111229    +                if flag ne 1 then do;
111230    +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
111231    +                end;
111232    +                else do;
111233    +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
111234    +                end;
111235    +              end;
111236    +              else do;
111237    +                 if flag=1 then do;
111238    +                   string = strip(DISPLAY_VAR) ;
111239    +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
111240    +                   endflag = 0;
111241    +                   string="";
111242    +                 end;
111243    +                 else do;
111244    +                   string = strip(string)!!" then do;";
111245    +                 end;
111246    +              end;
111247    +              put string;
111249    +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
111250    +              put string;
111251    +              if endflag eq 1 then do;
111252    +                put "end;";
111253    +              end;
111254    +           end;
111255    +           if last._variable_ then do;
111256    +             string = "end;";
111257    +             put string;
111258    +           end;
111259    +       end;
111260    +       else do;
111261    +           _split_value_ = tranwrd(_split_value_,"'","''");
111262    +           if first._group_ then do;
111263    +              flag=0;
111264    +              if ^first._variable_ then
111265    +                 put 'else';
111266    +              else do;
111267    +                 put ' ';
111268    +                 put "&EM_CODEBAR;";
111269    +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
111270    +                 put string;
111271    +                 put "&EM_CODEBAR;";
111273    +                 if origLabel ne "" then do;
111274    +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
111275    +                   put string;
111276    +                   string = tranwrd(origLabel,"'","''");
111277    +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
111278    +                   put string;
111279    +                 end;
111280    +                 else do;
111281    +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
111282    +                   put string;
111283    +                 end;
111285    +                 put ' ';
111287    +                if format ne '' then do;
111288    +                  if first._variable_ then do;
111289    +                    string = "_UFormat = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
111290    +                    put string;
111291    +                    string = '%dmnormip(_UFormat);';
111292    +                    put string;
111294    +                     string ="if MISSING(_UFORMAT) then do;";
111295    +                     put string;
111296    +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
111297    +                     put string;
111298    +                     put "end;";
111300    +                     string="else if NOT MISSING(_UFORMAT) then do;";
111301    +                     put string;
111303    +                  end;
111304    +                end;
111305    +                else do;
111306    +                     if type = 'N' then do;
111307    +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
111308    +                       put string;
111309    +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
111310    +                       put string;
111311    +                       put "end;";
111313    +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
111314    +                       put string;
111316    +                     end;
111317    +                     else if type='C' then do;
111318    +                        string = "_UFormat = "||strip(DISPLAY_VAR)||";";
111319    +                        put string;
111320    +                        string = '%dmnormip(_UFormat);';
111321    +                        put string;
111323    +                        string ="if MISSING(_UFORMAT) then do;";
111324    +                        put string;
111325    +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
111326    +                        put string;
111327    +                        put "end;";
111329    +                        string="else if NOT MISSING(_UFORMAT) then do;";
111330    +                        put string;
111331    +                        string = '%dmnormip(_UFormat);';
111332    +                        put string;
111333    +                    end;
111334    +                end;
111335    +              end;
111336    +              if format ne '' OR type='C' then do;
111337    +                string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
111338    +              end;
111339    +              else do;
111340    +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
111341    +              end;
111342    +           end;
111343    +           else do;
111344    +              if flag ne 1 then do;
111345    +                if format ne '' OR type='C' then do;
111346    +                  tempstring = strip(string)!!" OR _UFORMAT eq '"!!strip(_split_value_)!!"'";
111347    +                end;
111348    +                else do;
111349    +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
111350    +                end;
111351    +                length = klength(tempstring);
111353    +                if length < 195 then do;
111354    +                   string = tempstring;
111355    +                end;
111356    +                else do;
111358    +                   string = strip(string);
111359    +                   put string;
111360    +                   string = ") then do;";
111361    +                   put string;
111363    +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
111364    +                   put string;
111365    +                   put "end;";
111367    +                 /*  string = strip(string)||",'...';"; */
111369    +                   put 'else';
111370    +                   if format ne '' OR type='C' then do;
111371    +                     string = "if (_UFORMAT eq '"!!strip(_split_value_)!!"'";
111372    +                   end;
111373    +                   else do;
111374    +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
111375    +                   end;
111378    +                end;
111379    +              end;
111380    +           end;
111382    +           if last._group_ then do;
111383    +              string = strip(string);
111384    +              put string;
111385    +              string = ") then do;";
111386    +              put string;
111388    +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
111389    +              put string;
111390    +              put "end;";
111391    +           end;
111393    +           if last._variable_ then do;
111394    +             put "else do;";
111396    +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
111397    +             put string;
111399    +             put "end;";
111400    +             put "end;";
111401    +           end;
111402    +         *end;
111403    +       end;
111404    +    run;
111406    +    /* generate PublishCode the same as flowscorecode */
111407    +    filename Y "&publishCode";
111409    +    /* if publishCode already exists, wipe it out first */
111410    +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
111411    +      %let rc = %sysfunc(fdelete(Y));
111412    +    %end;
111414    +    %appendfiles(Y, X);
111416    +    %if %EM_BINARY_TARGET= %then %do;
111417    +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
111418    +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
111419    +      %end;
111420    +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
111421    +      %let ibn_inttarget_orig = &ibn_inttarget;
111423    +      %if %symexist(IGNBinTarget)=0 %then %do;
111424    +         %global ignbintarget ignfreqvar;
111425    +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
111426    +         %include temp;
111427    +         filename temp;
111428    +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
111430    +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
111431    +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
111432    +         %end;
111433    +      %end;
111434    +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
111435    +         proc sql noprint;
111436    +            %if %EM_FREQ ne %then %do;
111437    +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
111438    +            %end;
111439    +            %else %do;
111440    +               select mean(&ibn_inttarget)
111441    +            %end;
111442    +            into :ignbincut trimmed from &EM_IMPORT_DATA;
111443    +         quit;
111444    +      %end;
111446    +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
111447    +      %if &dsid %then %do;
111448    +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
111449    +         %let rc=%sysfunc(close(&dsid));
111450    +      %end;
111451    +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
111453    +      data _null_;
111454    +         file x mod;
111455    +         put ' ';
111457    +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
111458    +             put "&EM_CODEBAR;";
111459    +             %let note = Mean Cutoff Binary Transformation for Target;
111460    +             put "* &note;";
111461    +             put "&EM_CODEBAR;";
111462    +         %end;
111463    +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
111464    +             put "&EM_CODEBAR;";
111465    +             %let note = User-Specified Cutoff Binary Transformation for Target;
111466    +             put "* &note;";
111467    +             put "&EM_CODEBAR;";
111468    +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
111469    +         %end;
111470    +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
111471    +         put "else do;";
111472    +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
111473    +         put "   else &IGNBinTarget=0;";
111474    +         put "end;";
111476    +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
111477    +      run;
111479    +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
111481    +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
111483    +         data _null_;
111484    +            file deltaref;
111485    +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
111486    +            put "if name='&IGNBinTarget' then do;";
111487    +            put "   role='TARGET';";
111488    +            put "   level='BINARY';";
111489    +            put "end;";
111490    +         run;
111492    +      %end;
111493    +      %else %do;
111495    +         data _null_;
111496    +            file deltaref;
111497    +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
111498    +            put "if name='&IGNBinTarget' then do;";
111499    +            put "   role='REJECTED';";
111500    +            put "   level='BINARY';";
111501    +            put "end;";
111502    +         run;
111503    +      %end;
111505    +      filename deltaref;
111507    +   %end;
111509    +    filename X;
111510    +    filename Y;
111512    +    %buildOptScoreCode;
111514    +    proc datasets library=work nolist;
111515    +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
111516    +    run;
111517    +    quit;
111519    +%mend buildScoreCode;
111521    +%macro buildMetaCode(DeltaCodeFile=);
111523    +   /* set variable roles based on New Role column in the Results table */
111524    +   data _null_;
111525    +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
111526    +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
111527    +      %if &dsid %then %do;
111528    +        %let obs = %sysfunc(fetch(&dsid));
111529    +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
111530    +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
111531    +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
111533    +        %do %while(&obs=0);
111534    +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
111535    +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
111536    +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
111538    +          /* retrieve grp and woe names from varmappings dataset */
111539    +          %let choice = _VARIABLE_ = "&inputname";
111540    +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
111541    +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
111542    +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
111543    +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
111544    +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
111546    +          put "if name = '&inputname' then role='REJECTED';";
111547    +          %if "&role" ne "DEFAULT" %then %do;
111548    +            put "if name = '&grpname' then role='&role';";
111549    +          %end;
111550    +          %else %do;
111551    +            put "if name = '&grpname' then role='&oldrole';";
111552    +          %end;
111553    +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
111555    +          %let obs = %sysfunc(fetch(&dsid));
111556    +        %end;
111557    +      %end;
111558    +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
111559    +   run;
111561    +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
111562    +   data _null_;
111563    +      file &DeltaCodeFile MOD;
111565    +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
111566    +      %if &sdsid %then %do;
111567    +        %let sobs = %sysfunc(fetch(&sdsid));
111568    +        %do %while(&sobs=0);
111569    +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
111570    +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
111571    +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
111572    +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
111574    +          %let checkgrp = GRP_&checkname;
111575    +          %let lenname = %length(&checkgrp);
111576    +          %if %eval(&lenname-32) > 0 %then %do;
111577    +            %let checkgrp = %substr(&checkgrp, 1, 32);
111578    +          %end;
111580    +          %let choice = _VARIABLE_ ="&checkname";
111581    +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
111583    +          /* if var not found in varmappings, delete variables; */
111584    +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
111585    +          %if &vdsid eq 0 %then %do;
111586    +            put 'if name="&displayvar" then delete;';
111587    +            %let dispgrp = GRP_&displayvar;
111588    +            put 'if name="&dispgrp" then delete;';
111589    +          %end;
111591    +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
111592    +          %let sobs = %sysfunc(fetch(&sdsid));
111593    +        %end;
111594    +      %end;
111595    +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
111596    +   run;
111598    +%mend buildMetaCode;
111600    +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
111602    +   proc sort data=&coarse out=sortedcoarse nodupkey;
111603    +     by display_var;
111604    +   run;
111605    +   proc sort data=&varmappings nodupkey;
111606    +     by _variable_;
111607    +   run;
111608    +   %if %sysfunc(exist(&resultstable, data)) %then %do;
111609    +     proc sort data=&resultstable; by display_var; run;
111611    +     /* check that _new_role exists - did not exist in earlier releases */
111612    +     %let rds=%sysfunc(open(&resultstable));
111613    +     %let _newrolenum = %sysfunc(VARNUM(&rds, _new_role_));
111614    +     %let rds=%sysfunc(close(&rds));
111615    +   %end;
111617    +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
111618    +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
111619    +     %if %sysfunc(exist(&resultstable, data)) %then %do;
111620    +        &resultstable (keep = display_var %if &_newrolenum %then _new_role_; )
111621    +     %end;
111622    +     ;
111623    +     by display_var;
111624    +     length _role_ _new_role_ $10;
111625    +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
111626    +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
111627    +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
111628    +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
111629    +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
111630    +           ;
111632    +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
111633    +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
111634    +                _role_ = "Rejected";
111635    +             else _role_ = "Input";
111636    +           %end;
111637    +           %else %do;
111638    +             _role_ = "Input";
111639    +           %end;
111640    +           if _new_role_ eq "" then _new_role_="Default";
111641    +      if ^_a then do;
111642    +        _gini_ = 0;
111643    +        _role_ = 'Rejected';
111644    +        if _new_role_ eq "" then _new_role_="Default";
111645    +      end;
111646    +   run;
111647    +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
111648    +     by NAME;
111649    +   run;
111650    +   data outlabel;
111651    +     set outlabel;
111652    +     if _label_ = '' then _label_ = _variable_;
111653    +   run;
111654    +   data &resultstable;
111655    +     merge &resultstable(in=_a_) outlabel;
111656    +     by display_Var;
111657    +     if _a_ then output;
111658    +   run;
111659    +   proc datasets library=work nolist;
111660    +     delete sortedcoarse outlabel;
111661    +   run;
111662    +   quit;
111663    +   proc sort data=&resultstable nodupkey;
111664    +      by DESCENDING
111665    +        _gini_ display_Var;
111666    +   run;
111667    +   data &resultstable;
111668    +     set &resultstable;
111670    +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
111671    +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
111672    +     giniOrder = _N_;
111673    +     _gini_ = round(_GINI_, .001);
111674    +     drop _variable_;
111675    +   run;
111677    +   proc print data=&resultstable label;
111678    +   run;
111680    +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
111681    +   data &coarse;
111682    +     set &coarse;
111683    +     length role $10;
111684    +     %let dsid = %sysfunc(open(&resultstable));
111685    +     %if &dsid %then %do;
111686    +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
111687    +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
111688    +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
111690    +       %let obs = %sysfunc(fetch(&dsid));
111691    +       %do %while(&obs=0);
111692    +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
111693    +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
111694    +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
111696    +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
111697    +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
111698    +            giniOrder = &order;
111699    +            role = "&role";
111700    +          end;
111702    +          %let obs = %sysfunc(fetch(&dsid));
111703    +       %end;
111704    +     %end;
111705    +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
111706    +   run;
111709    +%mend EM_GENERATE_RESULTSTABLE;
111711    +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
111713    +    /* instantiate the zchar macro to be used in adding bin definition */
111714    +    filename _temp catalog 'sashelp.emmacs.zchar.source';
111715    +    %inc _temp;
111716    +    filename _temp;
111718    +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
111719    +      by _variable_ binFlag _group_ LB;
111720    +    run;
111722    +    data tempExport;
111723    +      set sortedFine;
111724    +      by _variable_ binFlag _group_;
111725    +      length _split_value_ $200;
111727    +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
111728    +      if binFlag = 0 then do;
111729    +        index = kindex(_variable_, "BIN_");
111730    +        if index gt 0 then do;
111731    +          _LEVEL_ = "INTERVAL";
111732    +        end;
111733    +        _Split_value_ = _split_value_;
111734    +        output;
111735    +      end;
111736    +      else do;
111737    +         * if last._group_ then do;
111738    +          index = kindex(_variable_, "BIN_");
111739    +          if index gt 0 then do;
111740    +            _LEVEL_ = "INTERVAL";
111741    +          end;
111742    +          _Split_value_ = %zchar(UB);
111743    +          output;
111744    +         * end;
111745    +      end;
111747    +      rename display_Var = _variable_;
111748    +      keep display_var _level_ _group_ _split_value_ binFlag;
111749    +    run;
111751    +    %if &CREATEMETHOD eq OVERWRITE %then %do;
111752    +       data &EXPORTGROUPING;
111753    +         set tempexport;
111754    +       run;
111755    +    %end;
111756    +    %else %do;
111757    +       /* determine if EXPORTGROUPING already exists */
111758    +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
111759    +         data &EXPORTGROUPING;
111760    +            set &EXPORTGROUPING tempexport;
111761    +         run;
111762    +       %end;
111763    +       %else %do;
111764    +         data &EXPORTGROUPING;
111765    +            set tempexport;
111766    +         run;
111767    +       %end;
111768    +    %end;
111770    +    proc datasets lib=work nolist;
111771    +      delete sortedFine tempexport;
111772    +    run;
111773    +    quit;
111775    +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
111779    +
111780    +%macro report;
111781    +
111782    +   /* if createGrouping then create a dataset for export */
111783    +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
111784    +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
111785    +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
111786    +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
111787    +   %end;
111788    +   %else %do;
111789    +     proc datasets library=&EM_LIB nolist;
111790    +       delete &EM_NODEID._EXPORTGROUP;
111791    +     run;
111792    +     quit;
111793    +   %end;
111794    +
111795    +
111796    +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
111797    +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
111798    +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
111799    +   %end;
111800    +   %else %do;
111801    +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
111802    +   %end;
111803    +
111804    +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
111805    +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
111806    +
111807    +
111808    +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS1 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS1.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           1.36 seconds
      cpu time            0.35 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 4.0) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69768809047419;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
111809     *------------------------------------------------------------*;
111810     * End REPORT: BINNING;
111811     *------------------------------------------------------------*;
111812     

111813     /* Reset EM Options */
111814     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
111815     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
111816     goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
111817     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
111818     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
111819     run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 134 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
