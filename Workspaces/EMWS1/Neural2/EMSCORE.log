MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:47:18" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 19, 2018
Time:                23:47:18
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O135T247 "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Neural2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O135T247 new;
MPRINT(EM_DIAGRAM):   run;
65830      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
65831      set EMWS1.Neural2_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_OUTKEY;
65832      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
65833      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 31 observations read from the data set EMWS1.NEURAL2_OUTKEY.
NOTE: The data set WORK.OUTKEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      

65834      filename emflow "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
65835      *------------------------------------------------------------*;
65836      * Neural2: Scoring DATA data;
65837      *------------------------------------------------------------*;
65838      data EMWS1.Neural2_TRAIN
65839      / view=EMWS1.Neural2_TRAIN
65840      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_TRAIN / view=EMWS1.Neural2_TRAIN ;
65841      set EMWS1.Part_TRAIN
65842      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_TRAIN ;
65843      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas.
65844     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
65845     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
65846     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
65847     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
65848     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
65849     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
65850     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
65851     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
65852     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
65853     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
65854     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
65855     +LENGTH _WARN_ $4
65856     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
65857     +      label S_Age = 'Standard: Age' ;
MPRINT(EM_DIAGRAM):   label S_Age = 'Standard: Age' ;
65858     +
65859     +      label S_Basement = 'Standard: Basement' ;
MPRINT(EM_DIAGRAM):   label S_Basement = 'Standard: Basement' ;
65860     +
65861     +      label S_Baths = 'Standard: Baths' ;
MPRINT(EM_DIAGRAM):   label S_Baths = 'Standard: Baths' ;
65862     +
65863     +      label S_FirePlace = 'Standard: FirePlace' ;
MPRINT(EM_DIAGRAM):   label S_FirePlace = 'Standard: FirePlace' ;
65864     +
65865     +      label S_FirstFloor = 'Standard: FirstFloor' ;
MPRINT(EM_DIAGRAM):   label S_FirstFloor = 'Standard: FirstFloor' ;
65866     +
65867     +      label S_GarageSize = 'Standard: GarageSize' ;
MPRINT(EM_DIAGRAM):   label S_GarageSize = 'Standard: GarageSize' ;
65868     +
65869     +      label S_SecondFloor = 'Standard: SecondFloor' ;
MPRINT(EM_DIAGRAM):   label S_SecondFloor = 'Standard: SecondFloor' ;
65870     +
65871     +      label S_TotalArea = 'Standard: TotalArea' ;
MPRINT(EM_DIAGRAM):   label S_TotalArea = 'Standard: TotalArea' ;
65872     +
65873     +      label S_UpperArea = 'Standard: UpperArea' ;
MPRINT(EM_DIAGRAM):   label S_UpperArea = 'Standard: UpperArea' ;
65874     +
65875     +      label CentralAir0 = 'Dummy: CentralAir=0' ;
MPRINT(EM_DIAGRAM):   label CentralAir0 = 'Dummy: CentralAir=0' ;
65876     +
65877     +      label BasementType0 = 'Dummy: BasementType=0' ;
MPRINT(EM_DIAGRAM):   label BasementType0 = 'Dummy: BasementType=0' ;
65878     +
65879     +      label BasementType1 = 'Dummy: BasementType=1' ;
MPRINT(EM_DIAGRAM):   label BasementType1 = 'Dummy: BasementType=1' ;
65880     +
65881     +      label ConstructionType1 = 'Dummy: ConstructionType=1' ;
MPRINT(EM_DIAGRAM):   label ConstructionType1 = 'Dummy: ConstructionType=1' ;
65882     +
65883     +      label ConstructionType2 = 'Dummy: ConstructionType=2' ;
MPRINT(EM_DIAGRAM):   label ConstructionType2 = 'Dummy: ConstructionType=2' ;
65884     +
65885     +      label GarageType0 = 'Dummy: GarageType=0' ;
MPRINT(EM_DIAGRAM):   label GarageType0 = 'Dummy: GarageType=0' ;
65886     +
65887     +      label GarageType1 = 'Dummy: GarageType=1' ;
MPRINT(EM_DIAGRAM):   label GarageType1 = 'Dummy: GarageType=1' ;
65888     +
65889     +      label GarageType2 = 'Dummy: GarageType=2' ;
MPRINT(EM_DIAGRAM):   label GarageType2 = 'Dummy: GarageType=2' ;
65890     +
65891     +      label GarageType3 = 'Dummy: GarageType=3' ;
MPRINT(EM_DIAGRAM):   label GarageType3 = 'Dummy: GarageType=3' ;
65892     +
65893     +      label GarageType4 = 'Dummy: GarageType=4' ;
MPRINT(EM_DIAGRAM):   label GarageType4 = 'Dummy: GarageType=4' ;
65894     +
65895     +      label LotSize1 = 'Dummy: LotSize=1' ;
MPRINT(EM_DIAGRAM):   label LotSize1 = 'Dummy: LotSize=1' ;
65896     +
65897     +      label LotSize2 = 'Dummy: LotSize=2' ;
MPRINT(EM_DIAGRAM):   label LotSize2 = 'Dummy: LotSize=2' ;
65898     +
65899     +      label Neighborhood1 = 'Dummy: Neighborhood=1' ;
MPRINT(EM_DIAGRAM):   label Neighborhood1 = 'Dummy: Neighborhood=1' ;
65900     +
65901     +      label WallType1 = 'Dummy: WallType=1' ;
MPRINT(EM_DIAGRAM):   label WallType1 = 'Dummy: WallType=1' ;
65902     +
65903     +      label WallType2 = 'Dummy: WallType=2' ;
MPRINT(EM_DIAGRAM):   label WallType2 = 'Dummy: WallType=2' ;
65904     +
65905     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
65906     +
65907     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
65908     +
65909     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
65910     +
65911     +      label P_SalePrice = 'Predicted: SalePrice' ;
MPRINT(EM_DIAGRAM):   label P_SalePrice = 'Predicted: SalePrice' ;
65912     +
65913     +      label R_SalePrice = 'Residual: SalePrice' ;
MPRINT(EM_DIAGRAM):   label R_SalePrice = 'Residual: SalePrice' ;
65914     +
65915     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
65916     +
65917     +*** Generate dummy variables for CentralAir ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CentralAir ;
65918     +drop CentralAir0 ;
MPRINT(EM_DIAGRAM):   drop CentralAir0 ;
65919     +if missing( CentralAir ) then do;
MPRINT(EM_DIAGRAM):   if missing( CentralAir ) then do;
65920     +   CentralAir0 = .;
MPRINT(EM_DIAGRAM):   CentralAir0 = .;
65921     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65922     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65923     +end;
MPRINT(EM_DIAGRAM):   end;
65924     +else do;
MPRINT(EM_DIAGRAM):   else do;
65925     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65926     +   _dm12 = put( CentralAir , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( CentralAir , BEST. );
65927     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65928     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
65929     +      CentralAir0 = -1;
MPRINT(EM_DIAGRAM):   CentralAir0 = -1;
65930     +   end;
MPRINT(EM_DIAGRAM):   end;
65931     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
65932     +      CentralAir0 = 1;
MPRINT(EM_DIAGRAM):   CentralAir0 = 1;
65933     +   end;
MPRINT(EM_DIAGRAM):   end;
65934     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65935     +      CentralAir0 = .;
MPRINT(EM_DIAGRAM):   CentralAir0 = .;
65936     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65937     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65938     +   end;
MPRINT(EM_DIAGRAM):   end;
65939     +end;
MPRINT(EM_DIAGRAM):   end;
65940     +
65941     +*** Generate dummy variables for BasementType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BasementType ;
65942     +drop BasementType0 BasementType1 ;
MPRINT(EM_DIAGRAM):   drop BasementType0 BasementType1 ;
65943     +if missing( BasementType ) then do;
MPRINT(EM_DIAGRAM):   if missing( BasementType ) then do;
65944     +   BasementType0 = .;
MPRINT(EM_DIAGRAM):   BasementType0 = .;
65945     +   BasementType1 = .;
MPRINT(EM_DIAGRAM):   BasementType1 = .;
65946     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65947     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65948     +end;
MPRINT(EM_DIAGRAM):   end;
65949     +else do;
MPRINT(EM_DIAGRAM):   else do;
65950     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65951     +   _dm12 = put( BasementType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( BasementType , BEST. );
65952     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65953     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
65954     +      BasementType0 = -1;
MPRINT(EM_DIAGRAM):   BasementType0 = -1;
65955     +      BasementType1 = -1;
MPRINT(EM_DIAGRAM):   BasementType1 = -1;
65956     +   end;
MPRINT(EM_DIAGRAM):   end;
65957     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
65958     +      BasementType0 = 0;
MPRINT(EM_DIAGRAM):   BasementType0 = 0;
65959     +      BasementType1 = 1;
MPRINT(EM_DIAGRAM):   BasementType1 = 1;
65960     +   end;
MPRINT(EM_DIAGRAM):   end;
65961     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
65962     +      BasementType0 = 1;
MPRINT(EM_DIAGRAM):   BasementType0 = 1;
65963     +      BasementType1 = 0;
MPRINT(EM_DIAGRAM):   BasementType1 = 0;
65964     +   end;
MPRINT(EM_DIAGRAM):   end;
65965     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65966     +      BasementType0 = .;
MPRINT(EM_DIAGRAM):   BasementType0 = .;
65967     +      BasementType1 = .;
MPRINT(EM_DIAGRAM):   BasementType1 = .;
65968     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
65969     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65970     +   end;
MPRINT(EM_DIAGRAM):   end;
65971     +end;
MPRINT(EM_DIAGRAM):   end;
65972     +
65973     +*** Generate dummy variables for ConstructionType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ConstructionType ;
65974     +drop ConstructionType1 ConstructionType2 ;
MPRINT(EM_DIAGRAM):   drop ConstructionType1 ConstructionType2 ;
65975     +if missing( ConstructionType ) then do;
MPRINT(EM_DIAGRAM):   if missing( ConstructionType ) then do;
65976     +   ConstructionType1 = .;
MPRINT(EM_DIAGRAM):   ConstructionType1 = .;
65977     +   ConstructionType2 = .;
MPRINT(EM_DIAGRAM):   ConstructionType2 = .;
65978     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
65979     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
65980     +end;
MPRINT(EM_DIAGRAM):   end;
65981     +else do;
MPRINT(EM_DIAGRAM):   else do;
65982     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
65983     +   _dm12 = put( ConstructionType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( ConstructionType , BEST. );
65984     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
65985     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
65986     +      ConstructionType1 = 1;
MPRINT(EM_DIAGRAM):   ConstructionType1 = 1;
65987     +      ConstructionType2 = 0;
MPRINT(EM_DIAGRAM):   ConstructionType2 = 0;
65988     +   end;
MPRINT(EM_DIAGRAM):   end;
65989     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
65990     +      ConstructionType1 = 0;
MPRINT(EM_DIAGRAM):   ConstructionType1 = 0;
65991     +      ConstructionType2 = 1;
MPRINT(EM_DIAGRAM):   ConstructionType2 = 1;
65992     +   end;
MPRINT(EM_DIAGRAM):   end;
65993     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
65994     +      ConstructionType1 = -1;
MPRINT(EM_DIAGRAM):   ConstructionType1 = -1;
65995     +      ConstructionType2 = -1;
MPRINT(EM_DIAGRAM):   ConstructionType2 = -1;
65996     +   end;
MPRINT(EM_DIAGRAM):   end;
65997     +   else do;
MPRINT(EM_DIAGRAM):   else do;
65998     +      ConstructionType1 = .;
MPRINT(EM_DIAGRAM):   ConstructionType1 = .;
65999     +      ConstructionType2 = .;
MPRINT(EM_DIAGRAM):   ConstructionType2 = .;
66000     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
66001     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66002     +   end;
MPRINT(EM_DIAGRAM):   end;
66003     +end;
MPRINT(EM_DIAGRAM):   end;
66004     +
66005     +*** Generate dummy variables for GarageType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GarageType ;
66006     +drop GarageType0 GarageType1 GarageType2 GarageType3 GarageType4 ;
MPRINT(EM_DIAGRAM):   drop GarageType0 GarageType1 GarageType2 GarageType3 GarageType4 ;
66007     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
66008     +GarageType0 = 0;
MPRINT(EM_DIAGRAM):   GarageType0 = 0;
66009     +GarageType1 = 0;
MPRINT(EM_DIAGRAM):   GarageType1 = 0;
66010     +GarageType2 = 0;
MPRINT(EM_DIAGRAM):   GarageType2 = 0;
66011     +GarageType3 = 0;
MPRINT(EM_DIAGRAM):   GarageType3 = 0;
66012     +GarageType4 = 0;
MPRINT(EM_DIAGRAM):   GarageType4 = 0;
66013     +if missing( GarageType ) then do;
MPRINT(EM_DIAGRAM):   if missing( GarageType ) then do;
66014     +   GarageType0 = .;
MPRINT(EM_DIAGRAM):   GarageType0 = .;
66015     +   GarageType1 = .;
MPRINT(EM_DIAGRAM):   GarageType1 = .;
66016     +   GarageType2 = .;
MPRINT(EM_DIAGRAM):   GarageType2 = .;
66017     +   GarageType3 = .;
MPRINT(EM_DIAGRAM):   GarageType3 = .;
66018     +   GarageType4 = .;
MPRINT(EM_DIAGRAM):   GarageType4 = .;
66019     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
66020     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66021     +end;
MPRINT(EM_DIAGRAM):   end;
66022     +else do;
MPRINT(EM_DIAGRAM):   else do;
66023     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
66024     +   _dm12 = put( GarageType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GarageType , BEST. );
66025     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
66026     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
66027     +      GarageType2 = 1;
MPRINT(EM_DIAGRAM):   GarageType2 = 1;
66028     +   end;
MPRINT(EM_DIAGRAM):   end;
66029     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
66030     +      GarageType0 = 1;
MPRINT(EM_DIAGRAM):   GarageType0 = 1;
66031     +   end;
MPRINT(EM_DIAGRAM):   end;
66032     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
66033     +      GarageType3 = 1;
MPRINT(EM_DIAGRAM):   GarageType3 = 1;
66034     +   end;
MPRINT(EM_DIAGRAM):   end;
66035     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
66036     +      GarageType1 = 1;
MPRINT(EM_DIAGRAM):   GarageType1 = 1;
66037     +   end;
MPRINT(EM_DIAGRAM):   end;
66038     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
66039     +      GarageType4 = 1;
MPRINT(EM_DIAGRAM):   GarageType4 = 1;
66040     +   end;
MPRINT(EM_DIAGRAM):   end;
66041     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
66042     +      GarageType0 = -1;
MPRINT(EM_DIAGRAM):   GarageType0 = -1;
66043     +      GarageType1 = -1;
MPRINT(EM_DIAGRAM):   GarageType1 = -1;
66044     +      GarageType2 = -1;
MPRINT(EM_DIAGRAM):   GarageType2 = -1;
66045     +      GarageType3 = -1;
MPRINT(EM_DIAGRAM):   GarageType3 = -1;
66046     +      GarageType4 = -1;
MPRINT(EM_DIAGRAM):   GarageType4 = -1;
66047     +   end;
MPRINT(EM_DIAGRAM):   end;
66048     +   else do;
MPRINT(EM_DIAGRAM):   else do;
66049     +      GarageType0 = .;
MPRINT(EM_DIAGRAM):   GarageType0 = .;
66050     +      GarageType1 = .;
MPRINT(EM_DIAGRAM):   GarageType1 = .;
66051     +      GarageType2 = .;
MPRINT(EM_DIAGRAM):   GarageType2 = .;
66052     +      GarageType3 = .;
MPRINT(EM_DIAGRAM):   GarageType3 = .;
66053     +      GarageType4 = .;
MPRINT(EM_DIAGRAM):   GarageType4 = .;
66054     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
66055     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66056     +   end;
MPRINT(EM_DIAGRAM):   end;
66057     +end;
MPRINT(EM_DIAGRAM):   end;
66058     +
66059     +*** Generate dummy variables for LotSize ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LotSize ;
66060     +drop LotSize1 LotSize2 ;
MPRINT(EM_DIAGRAM):   drop LotSize1 LotSize2 ;
66061     +if missing( LotSize ) then do;
MPRINT(EM_DIAGRAM):   if missing( LotSize ) then do;
66062     +   LotSize1 = .;
MPRINT(EM_DIAGRAM):   LotSize1 = .;
66063     +   LotSize2 = .;
MPRINT(EM_DIAGRAM):   LotSize2 = .;
66064     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
66065     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66066     +end;
MPRINT(EM_DIAGRAM):   end;
66067     +else do;
MPRINT(EM_DIAGRAM):   else do;
66068     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
66069     +   _dm12 = put( LotSize , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( LotSize , BEST. );
66070     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
66071     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
66072     +      LotSize1 = 1;
MPRINT(EM_DIAGRAM):   LotSize1 = 1;
66073     +      LotSize2 = 0;
MPRINT(EM_DIAGRAM):   LotSize2 = 0;
66074     +   end;
MPRINT(EM_DIAGRAM):   end;
66075     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
66076     +      LotSize1 = 0;
MPRINT(EM_DIAGRAM):   LotSize1 = 0;
66077     +      LotSize2 = 1;
MPRINT(EM_DIAGRAM):   LotSize2 = 1;
66078     +   end;
MPRINT(EM_DIAGRAM):   end;
66079     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
66080     +      LotSize1 = -1;
MPRINT(EM_DIAGRAM):   LotSize1 = -1;
66081     +      LotSize2 = -1;
MPRINT(EM_DIAGRAM):   LotSize2 = -1;
66082     +   end;
MPRINT(EM_DIAGRAM):   end;
66083     +   else do;
MPRINT(EM_DIAGRAM):   else do;
66084     +      LotSize1 = .;
MPRINT(EM_DIAGRAM):   LotSize1 = .;
66085     +      LotSize2 = .;
MPRINT(EM_DIAGRAM):   LotSize2 = .;
66086     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
66087     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66088     +   end;
MPRINT(EM_DIAGRAM):   end;
66089     +end;
MPRINT(EM_DIAGRAM):   end;
66090     +
66091     +*** Generate dummy variables for Neighborhood ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Neighborhood ;
66092     +drop Neighborhood1 ;
MPRINT(EM_DIAGRAM):   drop Neighborhood1 ;
66093     +if missing( Neighborhood ) then do;
MPRINT(EM_DIAGRAM):   if missing( Neighborhood ) then do;
66094     +   Neighborhood1 = .;
MPRINT(EM_DIAGRAM):   Neighborhood1 = .;
66095     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
66096     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66097     +end;
MPRINT(EM_DIAGRAM):   end;
66098     +else do;
MPRINT(EM_DIAGRAM):   else do;
66099     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
66100     +   _dm12 = put( Neighborhood , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Neighborhood , BEST. );
66101     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
66102     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
66103     +      Neighborhood1 = 1;
MPRINT(EM_DIAGRAM):   Neighborhood1 = 1;
66104     +   end;
MPRINT(EM_DIAGRAM):   end;
66105     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
66106     +      Neighborhood1 = -1;
MPRINT(EM_DIAGRAM):   Neighborhood1 = -1;
66107     +   end;
MPRINT(EM_DIAGRAM):   end;
66108     +   else do;
MPRINT(EM_DIAGRAM):   else do;
66109     +      Neighborhood1 = .;
MPRINT(EM_DIAGRAM):   Neighborhood1 = .;
66110     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
66111     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66112     +   end;
MPRINT(EM_DIAGRAM):   end;
66113     +end;
MPRINT(EM_DIAGRAM):   end;
66114     +
66115     +*** Generate dummy variables for WallType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for WallType ;
66116     +drop WallType1 WallType2 ;
MPRINT(EM_DIAGRAM):   drop WallType1 WallType2 ;
66117     +if missing( WallType ) then do;
MPRINT(EM_DIAGRAM):   if missing( WallType ) then do;
66118     +   WallType1 = .;
MPRINT(EM_DIAGRAM):   WallType1 = .;
66119     +   WallType2 = .;
MPRINT(EM_DIAGRAM):   WallType2 = .;
66120     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
66121     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66122     +end;
MPRINT(EM_DIAGRAM):   end;
66123     +else do;
MPRINT(EM_DIAGRAM):   else do;
66124     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
66125     +   _dm12 = put( WallType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( WallType , BEST. );
66126     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
66127     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
66128     +      WallType1 = 0;
MPRINT(EM_DIAGRAM):   WallType1 = 0;
66129     +      WallType2 = 1;
MPRINT(EM_DIAGRAM):   WallType2 = 1;
66130     +   end;
MPRINT(EM_DIAGRAM):   end;
66131     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
66132     +      WallType1 = 1;
MPRINT(EM_DIAGRAM):   WallType1 = 1;
66133     +      WallType2 = 0;
MPRINT(EM_DIAGRAM):   WallType2 = 0;
66134     +   end;
MPRINT(EM_DIAGRAM):   end;
66135     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
66136     +      WallType1 = -1;
MPRINT(EM_DIAGRAM):   WallType1 = -1;
66137     +      WallType2 = -1;
MPRINT(EM_DIAGRAM):   WallType2 = -1;
66138     +   end;
MPRINT(EM_DIAGRAM):   end;
66139     +   else do;
MPRINT(EM_DIAGRAM):   else do;
66140     +      WallType1 = .;
MPRINT(EM_DIAGRAM):   WallType1 = .;
66141     +      WallType2 = .;
MPRINT(EM_DIAGRAM):   WallType2 = .;
66142     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
66143     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66144     +   end;
MPRINT(EM_DIAGRAM):   end;
66145     +end;
MPRINT(EM_DIAGRAM):   end;
66146     +
66147     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66148     +*** Checking missing input Interval
66149     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
66150     +
66151     +IF NMISS(
66152     +   Age ,
66153     +   Basement ,
66154     +   Baths ,
66155     +   FirePlace ,
66156     +   FirstFloor ,
66157     +   GarageSize ,
66158     +   SecondFloor ,
66159     +   TotalArea ,
66160     +   UpperArea   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Age , Basement , Baths , FirePlace , FirstFloor , GarageSize , SecondFloor , TotalArea , UpperArea ) THEN DO;
66161     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
66162     +
66163     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66164     +END;
MPRINT(EM_DIAGRAM):   END;
66165     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66166     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
66167     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66168     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
66169     +   S_Age  =    -5.79800632867022 +     0.12225218876584 * Age ;
MPRINT(EM_DIAGRAM):   S_Age = -5.79800632867022 + 0.12225218876584 * Age ;
66170     +   S_Basement  =    -0.49458207878395 +     0.00334997337812 * Basement ;
MPRINT(EM_DIAGRAM):   S_Basement = -0.49458207878395 + 0.00334997337812 * Basement ;
66171     +   S_Baths  =    -1.76411714218363 +     1.10829261382142 * Baths ;
MPRINT(EM_DIAGRAM):   S_Baths = -1.76411714218363 + 1.10829261382142 * Baths ;
66172     +   S_FirePlace  =    -2.01186859107483 +     2.33291145135273 * FirePlace ;
MPRINT(EM_DIAGRAM):   S_FirePlace = -2.01186859107483 + 2.33291145135273 * FirePlace ;
66173     +   S_FirstFloor  =    -5.35340382063727 +     0.00510704735291 * FirstFloor ;
MPRINT(EM_DIAGRAM):   S_FirstFloor = -5.35340382063727 + 0.00510704735291 * FirstFloor ;
66174     +   S_GarageSize  =    -1.89394092412704 +     1.79512661504215 * GarageSize ;
MPRINT(EM_DIAGRAM):   S_GarageSize = -1.89394092412704 + 1.79512661504215 * GarageSize ;
66175     +   S_SecondFloor  =    -0.29097603119759 +      0.0043289957552 * SecondFloor
66176     +         ;
MPRINT(EM_DIAGRAM):   S_SecondFloor = -0.29097603119759 + 0.0043289957552 * SecondFloor ;
66177     +   S_TotalArea  =    -4.25637698545192 +     0.00299693547373 * TotalArea ;
MPRINT(EM_DIAGRAM):   S_TotalArea = -4.25637698545192 + 0.00299693547373 * TotalArea ;
66178     +   S_UpperArea  =    -1.23567045229017 +     0.00405418335138 * UpperArea ;
MPRINT(EM_DIAGRAM):   S_UpperArea = -1.23567045229017 + 0.00405418335138 * UpperArea ;
66179     +END;
MPRINT(EM_DIAGRAM):   END;
66180     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
66181     +   IF MISSING( Age ) THEN S_Age  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age ) THEN S_Age = . ;
66182     +   ELSE S_Age  =    -5.79800632867022 +     0.12225218876584 * Age ;
MPRINT(EM_DIAGRAM):   ELSE S_Age = -5.79800632867022 + 0.12225218876584 * Age ;
66183     +   IF MISSING( Basement ) THEN S_Basement  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Basement ) THEN S_Basement = . ;
66184     +   ELSE S_Basement  =    -0.49458207878395 +     0.00334997337812 * Basement ;
MPRINT(EM_DIAGRAM):   ELSE S_Basement = -0.49458207878395 + 0.00334997337812 * Basement ;
66185     +   IF MISSING( Baths ) THEN S_Baths  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Baths ) THEN S_Baths = . ;
66186     +   ELSE S_Baths  =    -1.76411714218363 +     1.10829261382142 * Baths ;
MPRINT(EM_DIAGRAM):   ELSE S_Baths = -1.76411714218363 + 1.10829261382142 * Baths ;
66187     +   IF MISSING( FirePlace ) THEN S_FirePlace  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( FirePlace ) THEN S_FirePlace = . ;
66188     +   ELSE S_FirePlace  =    -2.01186859107483 +     2.33291145135273 * FirePlace
66189     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_FirePlace = -2.01186859107483 + 2.33291145135273 * FirePlace ;
66190     +   IF MISSING( FirstFloor ) THEN S_FirstFloor  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( FirstFloor ) THEN S_FirstFloor = . ;
66191     +   ELSE S_FirstFloor  =    -5.35340382063727 +     0.00510704735291 *
66192     +        FirstFloor ;
MPRINT(EM_DIAGRAM):   ELSE S_FirstFloor = -5.35340382063727 + 0.00510704735291 * FirstFloor ;
66193     +   IF MISSING( GarageSize ) THEN S_GarageSize  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( GarageSize ) THEN S_GarageSize = . ;
66194     +   ELSE S_GarageSize  =    -1.89394092412704 +     1.79512661504215 *
66195     +        GarageSize ;
MPRINT(EM_DIAGRAM):   ELSE S_GarageSize = -1.89394092412704 + 1.79512661504215 * GarageSize ;
66196     +   IF MISSING( SecondFloor ) THEN S_SecondFloor  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SecondFloor ) THEN S_SecondFloor = . ;
66197     +   ELSE S_SecondFloor  =    -0.29097603119759 +      0.0043289957552 *
66198     +        SecondFloor ;
MPRINT(EM_DIAGRAM):   ELSE S_SecondFloor = -0.29097603119759 + 0.0043289957552 * SecondFloor ;
66199     +   IF MISSING( TotalArea ) THEN S_TotalArea  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( TotalArea ) THEN S_TotalArea = . ;
66200     +   ELSE S_TotalArea  =    -4.25637698545192 +     0.00299693547373 * TotalArea
66201     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_TotalArea = -4.25637698545192 + 0.00299693547373 * TotalArea ;
66202     +   IF MISSING( UpperArea ) THEN S_UpperArea  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( UpperArea ) THEN S_UpperArea = . ;
66203     +   ELSE S_UpperArea  =    -1.23567045229017 +     0.00405418335138 * UpperArea
66204     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_UpperArea = -1.23567045229017 + 0.00405418335138 * UpperArea ;
66205     +END;
MPRINT(EM_DIAGRAM):   END;
66206     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66207     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
66208     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66209     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66210     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
66211     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66212     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66213     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
66214     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66215     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
66216     +   H11  =     20.8288312527415 * S_Age  +     6.85079869815029 * S_Basement
66217     +          +    -3.36547636721141 * S_Baths  +     5.87348930230314 *
66218     +        S_FirePlace  +    -7.27353406960516 * S_FirstFloor
66219     +          +     20.2441756667926 * S_GarageSize  +     6.10111963584497 *
66220     +        S_SecondFloor  +    -6.66694048070819 * S_TotalArea
66221     +          +    -8.70959912917795 * S_UpperArea ;
MPRINT(EM_DIAGRAM):   H11 = 20.8288312527415 * S_Age + 6.85079869815029 * S_Basement + -3.36547636721141 * S_Baths + 5.87348930230314 * S_FirePlace + -7.27353406960516 * S_FirstFloor + 20.2441756667926 * S_GarageSize + 6.10111963584497 * S_SecondFloor + 
-6.66694048070819 * S_TotalArea + -8.70959912917795 * S_UpperArea ;
66222     +   H12  =     10.6130084030609 * S_Age  +     0.06518128670181 * S_Basement
66223     +          +     -1.2800594309462 * S_Baths  +     -1.9026009631468 *
66224     +        S_FirePlace  +    -8.13540387024598 * S_FirstFloor
66225     +          +    -4.26028301979254 * S_GarageSize  +     9.77550207180225 *
66226     +        S_SecondFloor  +    -5.11045925561562 * S_TotalArea
66227     +          +    -8.80684096235056 * S_UpperArea ;
MPRINT(EM_DIAGRAM):   H12 = 10.6130084030609 * S_Age + 0.06518128670181 * S_Basement + -1.2800594309462 * S_Baths + -1.9026009631468 * S_FirePlace + -8.13540387024598 * S_FirstFloor + -4.26028301979254 * S_GarageSize + 9.77550207180225 * S_SecondFloor + 
-5.11045925561562 * S_TotalArea + -8.80684096235056 * S_UpperArea ;
66228     +   H13  =    -1.62638015241576 * S_Age  +     0.17835440510199 * S_Basement
66229     +          +    -0.47760139391044 * S_Baths  +     1.23916642847139 *
66230     +        S_FirePlace  +     -2.6601728675208 * S_FirstFloor
66231     +          +     6.30709787750877 * S_GarageSize  +     10.9811095291095 *
66232     +        S_SecondFloor  +     3.89258982642337 * S_TotalArea
66233     +          +    -3.02954537381811 * S_UpperArea ;
MPRINT(EM_DIAGRAM):   H13 = -1.62638015241576 * S_Age + 0.17835440510199 * S_Basement + -0.47760139391044 * S_Baths + 1.23916642847139 * S_FirePlace + -2.6601728675208 * S_FirstFloor + 6.30709787750877 * S_GarageSize + 10.9811095291095 * S_SecondFloor + 
3.89258982642337 * S_TotalArea + -3.02954537381811 * S_UpperArea ;
66234     +   H11  = H11  +    -6.50435321735439 * CentralAir0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -6.50435321735439 * CentralAir0 ;
66235     +   H12  = H12  +     5.23476103837851 * CentralAir0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 5.23476103837851 * CentralAir0 ;
66236     +   H13  = H13  +    -1.65946101157946 * CentralAir0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -1.65946101157946 * CentralAir0 ;
66237     +   H11  = H11  +     13.2536314783556 * BasementType0
66238     +          +     8.53133008760714 * BasementType1  +     0.56324337358479 *
66239     +        ConstructionType1  +      3.3564335892726 * ConstructionType2
66240     +          +     1.14539912832644 * GarageType0  +     1.58774341463134 *
66241     +        GarageType1  +      8.8976533682871 * GarageType2
66242     +          +    -3.73619344175417 * GarageType3  +     1.12451162075893 *
66243     +        GarageType4  +     8.78498105448465 * LotSize1
66244     +          +     0.42366513958359 * LotSize2  +     13.5677805097637 *
66245     +        Neighborhood1  +     2.14852781244836 * WallType1
66246     +          +     5.67050453528512 * WallType2 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 13.2536314783556 * BasementType0 + 8.53133008760714 * BasementType1 + 0.56324337358479 * ConstructionType1 + 3.3564335892726 * ConstructionType2 + 1.14539912832644 * GarageType0 + 1.58774341463134 * GarageType1 + 
8.8976533682871 * GarageType2 + -3.73619344175417 * GarageType3 + 1.12451162075893 * GarageType4 + 8.78498105448465 * LotSize1 + 0.42366513958359 * LotSize2 + 13.5677805097637 * Neighborhood1 + 2.14852781244836 * WallType1 + 5.67050453528512 * WallType2 ;
66247     +   H12  = H12  +     7.66955372286829 * BasementType0
66248     +          +    -8.73066216590974 * BasementType1  +     23.5653250443181 *
66249     +        ConstructionType1  +     2.11127274928508 * ConstructionType2
66250     +          +      11.824454390871 * GarageType0  +    -12.2102535974649 *
66251     +        GarageType1  +    -12.2564813758267 * GarageType2
66252     +          +    -2.49731621962372 * GarageType3  +      0.9647934720046 *
66253     +        GarageType4  +    -4.67336075437814 * LotSize1
66254     +          +     8.07675667956709 * LotSize2  +       5.357475327314 *
66255     +        Neighborhood1  +     15.0927125893857 * WallType1
66256     +          +     8.83353157035109 * WallType2 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 7.66955372286829 * BasementType0 + -8.73066216590974 * BasementType1 + 23.5653250443181 * ConstructionType1 + 2.11127274928508 * ConstructionType2 + 11.824454390871 * GarageType0 + -12.2102535974649 * GarageType1 + 
-12.2564813758267 * GarageType2 + -2.49731621962372 * GarageType3 + 0.9647934720046 * GarageType4 + -4.67336075437814 * LotSize1 + 8.07675667956709 * LotSize2 + 5.357475327314 * Neighborhood1 + 15.0927125893857 * WallType1 + 8.83353157035109 * WallType2 ;
66257     +   H13  = H13  +    -4.10438331026384 * BasementType0
66258     +          +    -2.78852746806888 * BasementType1  +      9.1197257283848 *
66259     +        ConstructionType1  +     9.95993746370288 * ConstructionType2
66260     +          +     7.50990557902757 * GarageType0  +    -2.87649922677036 *
66261     +        GarageType1  +    -1.95379030908894 * GarageType2
66262     +          +     0.35884481891863 * GarageType3  +     -4.2599790016529 *
66263     +        GarageType4  +    -6.44191524747859 * LotSize1
66264     +          +    -3.99224957796703 * LotSize2  +    -0.27911699149498 *
66265     +        Neighborhood1  +     2.26145968118917 * WallType1
66266     +          +     3.59881778615552 * WallType2 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -4.10438331026384 * BasementType0 + -2.78852746806888 * BasementType1 + 9.1197257283848 * ConstructionType1 + 9.95993746370288 * ConstructionType2 + 7.50990557902757 * GarageType0 + -2.87649922677036 * GarageType1 + 
-1.95379030908894 * GarageType2 + 0.35884481891863 * GarageType3 + -4.2599790016529 * GarageType4 + -6.44191524747859 * LotSize1 + -3.99224957796703 * LotSize2 + -0.27911699149498 * Neighborhood1 + 2.26145968118917 * WallType1 + 3.59881778615552 * 
WallType2 ;
66267     +   H11  =     7.50883561626074 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 7.50883561626074 + H11 ;
66268     +   H12  =    -12.0514974902983 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -12.0514974902983 + H12 ;
66269     +   H13  =    -8.46602867977754 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -8.46602867977754 + H13 ;
66270     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
66271     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
66272     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
66273     +END;
MPRINT(EM_DIAGRAM):   END;
66274     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
66275     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
66276     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
66277     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
66278     +END;
MPRINT(EM_DIAGRAM):   END;
66279     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66280     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
66281     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66282     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
66283     +   P_SalePrice  =    -530.197082139242 * H11  +    -1939.73401065351 * H12
66284     +          +     6303.94688435578 * H13 ;
MPRINT(EM_DIAGRAM):   P_SalePrice = -530.197082139242 * H11 + -1939.73401065351 * H12 + 6303.94688435578 * H13 ;
66285     +   P_SalePrice  =     76098.8597249232 + P_SalePrice ;
MPRINT(EM_DIAGRAM):   P_SalePrice = 76098.8597249232 + P_SalePrice ;
66286     +END;
MPRINT(EM_DIAGRAM):   END;
66287     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
66288     +   P_SalePrice  = .;
MPRINT(EM_DIAGRAM):   P_SalePrice = .;
66289     +END;
MPRINT(EM_DIAGRAM):   END;
66290     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
66291     +   P_SalePrice  =     75984.2752293578;
MPRINT(EM_DIAGRAM):   P_SalePrice = 75984.2752293578;
66292     +END;
MPRINT(EM_DIAGRAM):   END;
66293     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
66294     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
66295     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
66296     +IF MISSING( SalePrice ) THEN R_SalePrice  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SalePrice ) THEN R_SalePrice = . ;
66297     +ELSE R_SalePrice  = SalePrice  - P_SalePrice ;
MPRINT(EM_DIAGRAM):   ELSE R_SalePrice = SalePrice - P_SalePrice ;
66298     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
66299     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
66300     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
66301     +drop
66302     +H11
66303     +H12
66304     +H13
66305     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
66306     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
66307      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
66308      quit;
66309      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
66310      filename emflow "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
66311      *------------------------------------------------------------*;
66312      * Neural2: Scoring VALIDATE data;
66313      *------------------------------------------------------------*;
66314      data EMWS1.Neural2_VALIDATE
66315      / view=EMWS1.Neural2_VALIDATE
66316      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_VALIDATE / view=EMWS1.Neural2_VALIDATE ;
66317      set EMWS1.Part_VALIDATE
66318      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_VALIDATE ;
66319      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Neural2\EMFLOWSCORE.sas.
66320     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
66321     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
66322     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
66323     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
66324     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
66325     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
66326     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
66327     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
66328     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
66329     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
66330     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
66331     +LENGTH _WARN_ $4
66332     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 ;
66333     +      label S_Age = 'Standard: Age' ;
MPRINT(EM_DIAGRAM):   label S_Age = 'Standard: Age' ;
66334     +
66335     +      label S_Basement = 'Standard: Basement' ;
MPRINT(EM_DIAGRAM):   label S_Basement = 'Standard: Basement' ;
66336     +
66337     +      label S_Baths = 'Standard: Baths' ;
MPRINT(EM_DIAGRAM):   label S_Baths = 'Standard: Baths' ;
66338     +
66339     +      label S_FirePlace = 'Standard: FirePlace' ;
MPRINT(EM_DIAGRAM):   label S_FirePlace = 'Standard: FirePlace' ;
66340     +
66341     +      label S_FirstFloor = 'Standard: FirstFloor' ;
MPRINT(EM_DIAGRAM):   label S_FirstFloor = 'Standard: FirstFloor' ;
66342     +
66343     +      label S_GarageSize = 'Standard: GarageSize' ;
MPRINT(EM_DIAGRAM):   label S_GarageSize = 'Standard: GarageSize' ;
66344     +
66345     +      label S_SecondFloor = 'Standard: SecondFloor' ;
MPRINT(EM_DIAGRAM):   label S_SecondFloor = 'Standard: SecondFloor' ;
66346     +
66347     +      label S_TotalArea = 'Standard: TotalArea' ;
MPRINT(EM_DIAGRAM):   label S_TotalArea = 'Standard: TotalArea' ;
66348     +
66349     +      label S_UpperArea = 'Standard: UpperArea' ;
MPRINT(EM_DIAGRAM):   label S_UpperArea = 'Standard: UpperArea' ;
66350     +
66351     +      label CentralAir0 = 'Dummy: CentralAir=0' ;
MPRINT(EM_DIAGRAM):   label CentralAir0 = 'Dummy: CentralAir=0' ;
66352     +
66353     +      label BasementType0 = 'Dummy: BasementType=0' ;
MPRINT(EM_DIAGRAM):   label BasementType0 = 'Dummy: BasementType=0' ;
66354     +
66355     +      label BasementType1 = 'Dummy: BasementType=1' ;
MPRINT(EM_DIAGRAM):   label BasementType1 = 'Dummy: BasementType=1' ;
66356     +
66357     +      label ConstructionType1 = 'Dummy: ConstructionType=1' ;
MPRINT(EM_DIAGRAM):   label ConstructionType1 = 'Dummy: ConstructionType=1' ;
66358     +
66359     +      label ConstructionType2 = 'Dummy: ConstructionType=2' ;
MPRINT(EM_DIAGRAM):   label ConstructionType2 = 'Dummy: ConstructionType=2' ;
66360     +
66361     +      label GarageType0 = 'Dummy: GarageType=0' ;
MPRINT(EM_DIAGRAM):   label GarageType0 = 'Dummy: GarageType=0' ;
66362     +
66363     +      label GarageType1 = 'Dummy: GarageType=1' ;
MPRINT(EM_DIAGRAM):   label GarageType1 = 'Dummy: GarageType=1' ;
66364     +
66365     +      label GarageType2 = 'Dummy: GarageType=2' ;
MPRINT(EM_DIAGRAM):   label GarageType2 = 'Dummy: GarageType=2' ;
66366     +
66367     +      label GarageType3 = 'Dummy: GarageType=3' ;
MPRINT(EM_DIAGRAM):   label GarageType3 = 'Dummy: GarageType=3' ;
66368     +
66369     +      label GarageType4 = 'Dummy: GarageType=4' ;
MPRINT(EM_DIAGRAM):   label GarageType4 = 'Dummy: GarageType=4' ;
66370     +
66371     +      label LotSize1 = 'Dummy: LotSize=1' ;
MPRINT(EM_DIAGRAM):   label LotSize1 = 'Dummy: LotSize=1' ;
66372     +
66373     +      label LotSize2 = 'Dummy: LotSize=2' ;
MPRINT(EM_DIAGRAM):   label LotSize2 = 'Dummy: LotSize=2' ;
66374     +
66375     +      label Neighborhood1 = 'Dummy: Neighborhood=1' ;
MPRINT(EM_DIAGRAM):   label Neighborhood1 = 'Dummy: Neighborhood=1' ;
66376     +
66377     +      label WallType1 = 'Dummy: WallType=1' ;
MPRINT(EM_DIAGRAM):   label WallType1 = 'Dummy: WallType=1' ;
66378     +
66379     +      label WallType2 = 'Dummy: WallType=2' ;
MPRINT(EM_DIAGRAM):   label WallType2 = 'Dummy: WallType=2' ;
66380     +
66381     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
66382     +
66383     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
66384     +
66385     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
66386     +
66387     +      label P_SalePrice = 'Predicted: SalePrice' ;
MPRINT(EM_DIAGRAM):   label P_SalePrice = 'Predicted: SalePrice' ;
66388     +
66389     +      label R_SalePrice = 'Residual: SalePrice' ;
MPRINT(EM_DIAGRAM):   label R_SalePrice = 'Residual: SalePrice' ;
66390     +
66391     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
66392     +
66393     +*** Generate dummy variables for CentralAir ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for CentralAir ;
66394     +drop CentralAir0 ;
MPRINT(EM_DIAGRAM):   drop CentralAir0 ;
66395     +if missing( CentralAir ) then do;
MPRINT(EM_DIAGRAM):   if missing( CentralAir ) then do;
66396     +   CentralAir0 = .;
MPRINT(EM_DIAGRAM):   CentralAir0 = .;
66397     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
66398     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66399     +end;
MPRINT(EM_DIAGRAM):   end;
66400     +else do;
MPRINT(EM_DIAGRAM):   else do;
66401     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
66402     +   _dm12 = put( CentralAir , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( CentralAir , BEST. );
66403     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
66404     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
66405     +      CentralAir0 = -1;
MPRINT(EM_DIAGRAM):   CentralAir0 = -1;
66406     +   end;
MPRINT(EM_DIAGRAM):   end;
66407     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
66408     +      CentralAir0 = 1;
MPRINT(EM_DIAGRAM):   CentralAir0 = 1;
66409     +   end;
MPRINT(EM_DIAGRAM):   end;
66410     +   else do;
MPRINT(EM_DIAGRAM):   else do;
66411     +      CentralAir0 = .;
MPRINT(EM_DIAGRAM):   CentralAir0 = .;
66412     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
66413     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66414     +   end;
MPRINT(EM_DIAGRAM):   end;
66415     +end;
MPRINT(EM_DIAGRAM):   end;
66416     +
66417     +*** Generate dummy variables for BasementType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BasementType ;
66418     +drop BasementType0 BasementType1 ;
MPRINT(EM_DIAGRAM):   drop BasementType0 BasementType1 ;
66419     +if missing( BasementType ) then do;
MPRINT(EM_DIAGRAM):   if missing( BasementType ) then do;
66420     +   BasementType0 = .;
MPRINT(EM_DIAGRAM):   BasementType0 = .;
66421     +   BasementType1 = .;
MPRINT(EM_DIAGRAM):   BasementType1 = .;
66422     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
66423     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66424     +end;
MPRINT(EM_DIAGRAM):   end;
66425     +else do;
MPRINT(EM_DIAGRAM):   else do;
66426     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
66427     +   _dm12 = put( BasementType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( BasementType , BEST. );
66428     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
66429     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
66430     +      BasementType0 = -1;
MPRINT(EM_DIAGRAM):   BasementType0 = -1;
66431     +      BasementType1 = -1;
MPRINT(EM_DIAGRAM):   BasementType1 = -1;
66432     +   end;
MPRINT(EM_DIAGRAM):   end;
66433     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
66434     +      BasementType0 = 0;
MPRINT(EM_DIAGRAM):   BasementType0 = 0;
66435     +      BasementType1 = 1;
MPRINT(EM_DIAGRAM):   BasementType1 = 1;
66436     +   end;
MPRINT(EM_DIAGRAM):   end;
66437     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
66438     +      BasementType0 = 1;
MPRINT(EM_DIAGRAM):   BasementType0 = 1;
66439     +      BasementType1 = 0;
MPRINT(EM_DIAGRAM):   BasementType1 = 0;
66440     +   end;
MPRINT(EM_DIAGRAM):   end;
66441     +   else do;
MPRINT(EM_DIAGRAM):   else do;
66442     +      BasementType0 = .;
MPRINT(EM_DIAGRAM):   BasementType0 = .;
66443     +      BasementType1 = .;
MPRINT(EM_DIAGRAM):   BasementType1 = .;
66444     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
66445     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66446     +   end;
MPRINT(EM_DIAGRAM):   end;
66447     +end;
MPRINT(EM_DIAGRAM):   end;
66448     +
66449     +*** Generate dummy variables for ConstructionType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for ConstructionType ;
66450     +drop ConstructionType1 ConstructionType2 ;
MPRINT(EM_DIAGRAM):   drop ConstructionType1 ConstructionType2 ;
66451     +if missing( ConstructionType ) then do;
MPRINT(EM_DIAGRAM):   if missing( ConstructionType ) then do;
66452     +   ConstructionType1 = .;
MPRINT(EM_DIAGRAM):   ConstructionType1 = .;
66453     +   ConstructionType2 = .;
MPRINT(EM_DIAGRAM):   ConstructionType2 = .;
66454     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
66455     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66456     +end;
MPRINT(EM_DIAGRAM):   end;
66457     +else do;
MPRINT(EM_DIAGRAM):   else do;
66458     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
66459     +   _dm12 = put( ConstructionType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( ConstructionType , BEST. );
66460     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
66461     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
66462     +      ConstructionType1 = 1;
MPRINT(EM_DIAGRAM):   ConstructionType1 = 1;
66463     +      ConstructionType2 = 0;
MPRINT(EM_DIAGRAM):   ConstructionType2 = 0;
66464     +   end;
MPRINT(EM_DIAGRAM):   end;
66465     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
66466     +      ConstructionType1 = 0;
MPRINT(EM_DIAGRAM):   ConstructionType1 = 0;
66467     +      ConstructionType2 = 1;
MPRINT(EM_DIAGRAM):   ConstructionType2 = 1;
66468     +   end;
MPRINT(EM_DIAGRAM):   end;
66469     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
66470     +      ConstructionType1 = -1;
MPRINT(EM_DIAGRAM):   ConstructionType1 = -1;
66471     +      ConstructionType2 = -1;
MPRINT(EM_DIAGRAM):   ConstructionType2 = -1;
66472     +   end;
MPRINT(EM_DIAGRAM):   end;
66473     +   else do;
MPRINT(EM_DIAGRAM):   else do;
66474     +      ConstructionType1 = .;
MPRINT(EM_DIAGRAM):   ConstructionType1 = .;
66475     +      ConstructionType2 = .;
MPRINT(EM_DIAGRAM):   ConstructionType2 = .;
66476     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
66477     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66478     +   end;
MPRINT(EM_DIAGRAM):   end;
66479     +end;
MPRINT(EM_DIAGRAM):   end;
66480     +
66481     +*** Generate dummy variables for GarageType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GarageType ;
66482     +drop GarageType0 GarageType1 GarageType2 GarageType3 GarageType4 ;
MPRINT(EM_DIAGRAM):   drop GarageType0 GarageType1 GarageType2 GarageType3 GarageType4 ;
66483     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
66484     +GarageType0 = 0;
MPRINT(EM_DIAGRAM):   GarageType0 = 0;
66485     +GarageType1 = 0;
MPRINT(EM_DIAGRAM):   GarageType1 = 0;
66486     +GarageType2 = 0;
MPRINT(EM_DIAGRAM):   GarageType2 = 0;
66487     +GarageType3 = 0;
MPRINT(EM_DIAGRAM):   GarageType3 = 0;
66488     +GarageType4 = 0;
MPRINT(EM_DIAGRAM):   GarageType4 = 0;
66489     +if missing( GarageType ) then do;
MPRINT(EM_DIAGRAM):   if missing( GarageType ) then do;
66490     +   GarageType0 = .;
MPRINT(EM_DIAGRAM):   GarageType0 = .;
66491     +   GarageType1 = .;
MPRINT(EM_DIAGRAM):   GarageType1 = .;
66492     +   GarageType2 = .;
MPRINT(EM_DIAGRAM):   GarageType2 = .;
66493     +   GarageType3 = .;
MPRINT(EM_DIAGRAM):   GarageType3 = .;
66494     +   GarageType4 = .;
MPRINT(EM_DIAGRAM):   GarageType4 = .;
66495     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
66496     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66497     +end;
MPRINT(EM_DIAGRAM):   end;
66498     +else do;
MPRINT(EM_DIAGRAM):   else do;
66499     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
66500     +   _dm12 = put( GarageType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GarageType , BEST. );
66501     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
66502     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
66503     +      GarageType2 = 1;
MPRINT(EM_DIAGRAM):   GarageType2 = 1;
66504     +   end;
MPRINT(EM_DIAGRAM):   end;
66505     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
66506     +      GarageType0 = 1;
MPRINT(EM_DIAGRAM):   GarageType0 = 1;
66507     +   end;
MPRINT(EM_DIAGRAM):   end;
66508     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
66509     +      GarageType3 = 1;
MPRINT(EM_DIAGRAM):   GarageType3 = 1;
66510     +   end;
MPRINT(EM_DIAGRAM):   end;
66511     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
66512     +      GarageType1 = 1;
MPRINT(EM_DIAGRAM):   GarageType1 = 1;
66513     +   end;
MPRINT(EM_DIAGRAM):   end;
66514     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
66515     +      GarageType4 = 1;
MPRINT(EM_DIAGRAM):   GarageType4 = 1;
66516     +   end;
MPRINT(EM_DIAGRAM):   end;
66517     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
66518     +      GarageType0 = -1;
MPRINT(EM_DIAGRAM):   GarageType0 = -1;
66519     +      GarageType1 = -1;
MPRINT(EM_DIAGRAM):   GarageType1 = -1;
66520     +      GarageType2 = -1;
MPRINT(EM_DIAGRAM):   GarageType2 = -1;
66521     +      GarageType3 = -1;
MPRINT(EM_DIAGRAM):   GarageType3 = -1;
66522     +      GarageType4 = -1;
MPRINT(EM_DIAGRAM):   GarageType4 = -1;
66523     +   end;
MPRINT(EM_DIAGRAM):   end;
66524     +   else do;
MPRINT(EM_DIAGRAM):   else do;
66525     +      GarageType0 = .;
MPRINT(EM_DIAGRAM):   GarageType0 = .;
66526     +      GarageType1 = .;
MPRINT(EM_DIAGRAM):   GarageType1 = .;
66527     +      GarageType2 = .;
MPRINT(EM_DIAGRAM):   GarageType2 = .;
66528     +      GarageType3 = .;
MPRINT(EM_DIAGRAM):   GarageType3 = .;
66529     +      GarageType4 = .;
MPRINT(EM_DIAGRAM):   GarageType4 = .;
66530     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
66531     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66532     +   end;
MPRINT(EM_DIAGRAM):   end;
66533     +end;
MPRINT(EM_DIAGRAM):   end;
66534     +
66535     +*** Generate dummy variables for LotSize ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for LotSize ;
66536     +drop LotSize1 LotSize2 ;
MPRINT(EM_DIAGRAM):   drop LotSize1 LotSize2 ;
66537     +if missing( LotSize ) then do;
MPRINT(EM_DIAGRAM):   if missing( LotSize ) then do;
66538     +   LotSize1 = .;
MPRINT(EM_DIAGRAM):   LotSize1 = .;
66539     +   LotSize2 = .;
MPRINT(EM_DIAGRAM):   LotSize2 = .;
66540     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
66541     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66542     +end;
MPRINT(EM_DIAGRAM):   end;
66543     +else do;
MPRINT(EM_DIAGRAM):   else do;
66544     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
66545     +   _dm12 = put( LotSize , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( LotSize , BEST. );
66546     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
66547     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
66548     +      LotSize1 = 1;
MPRINT(EM_DIAGRAM):   LotSize1 = 1;
66549     +      LotSize2 = 0;
MPRINT(EM_DIAGRAM):   LotSize2 = 0;
66550     +   end;
MPRINT(EM_DIAGRAM):   end;
66551     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
66552     +      LotSize1 = 0;
MPRINT(EM_DIAGRAM):   LotSize1 = 0;
66553     +      LotSize2 = 1;
MPRINT(EM_DIAGRAM):   LotSize2 = 1;
66554     +   end;
MPRINT(EM_DIAGRAM):   end;
66555     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
66556     +      LotSize1 = -1;
MPRINT(EM_DIAGRAM):   LotSize1 = -1;
66557     +      LotSize2 = -1;
MPRINT(EM_DIAGRAM):   LotSize2 = -1;
66558     +   end;
MPRINT(EM_DIAGRAM):   end;
66559     +   else do;
MPRINT(EM_DIAGRAM):   else do;
66560     +      LotSize1 = .;
MPRINT(EM_DIAGRAM):   LotSize1 = .;
66561     +      LotSize2 = .;
MPRINT(EM_DIAGRAM):   LotSize2 = .;
66562     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
66563     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66564     +   end;
MPRINT(EM_DIAGRAM):   end;
66565     +end;
MPRINT(EM_DIAGRAM):   end;
66566     +
66567     +*** Generate dummy variables for Neighborhood ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Neighborhood ;
66568     +drop Neighborhood1 ;
MPRINT(EM_DIAGRAM):   drop Neighborhood1 ;
66569     +if missing( Neighborhood ) then do;
MPRINT(EM_DIAGRAM):   if missing( Neighborhood ) then do;
66570     +   Neighborhood1 = .;
MPRINT(EM_DIAGRAM):   Neighborhood1 = .;
66571     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
66572     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66573     +end;
MPRINT(EM_DIAGRAM):   end;
66574     +else do;
MPRINT(EM_DIAGRAM):   else do;
66575     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
66576     +   _dm12 = put( Neighborhood , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Neighborhood , BEST. );
66577     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
66578     +   if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
66579     +      Neighborhood1 = 1;
MPRINT(EM_DIAGRAM):   Neighborhood1 = 1;
66580     +   end;
MPRINT(EM_DIAGRAM):   end;
66581     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
66582     +      Neighborhood1 = -1;
MPRINT(EM_DIAGRAM):   Neighborhood1 = -1;
66583     +   end;
MPRINT(EM_DIAGRAM):   end;
66584     +   else do;
MPRINT(EM_DIAGRAM):   else do;
66585     +      Neighborhood1 = .;
MPRINT(EM_DIAGRAM):   Neighborhood1 = .;
66586     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
66587     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66588     +   end;
MPRINT(EM_DIAGRAM):   end;
66589     +end;
MPRINT(EM_DIAGRAM):   end;
66590     +
66591     +*** Generate dummy variables for WallType ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for WallType ;
66592     +drop WallType1 WallType2 ;
MPRINT(EM_DIAGRAM):   drop WallType1 WallType2 ;
66593     +if missing( WallType ) then do;
MPRINT(EM_DIAGRAM):   if missing( WallType ) then do;
66594     +   WallType1 = .;
MPRINT(EM_DIAGRAM):   WallType1 = .;
66595     +   WallType2 = .;
MPRINT(EM_DIAGRAM):   WallType2 = .;
66596     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
66597     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66598     +end;
MPRINT(EM_DIAGRAM):   end;
66599     +else do;
MPRINT(EM_DIAGRAM):   else do;
66600     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
66601     +   _dm12 = put( WallType , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( WallType , BEST. );
66602     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
66603     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
66604     +      WallType1 = 0;
MPRINT(EM_DIAGRAM):   WallType1 = 0;
66605     +      WallType2 = 1;
MPRINT(EM_DIAGRAM):   WallType2 = 1;
66606     +   end;
MPRINT(EM_DIAGRAM):   end;
66607     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
66608     +      WallType1 = 1;
MPRINT(EM_DIAGRAM):   WallType1 = 1;
66609     +      WallType2 = 0;
MPRINT(EM_DIAGRAM):   WallType2 = 0;
66610     +   end;
MPRINT(EM_DIAGRAM):   end;
66611     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
66612     +      WallType1 = -1;
MPRINT(EM_DIAGRAM):   WallType1 = -1;
66613     +      WallType2 = -1;
MPRINT(EM_DIAGRAM):   WallType2 = -1;
66614     +   end;
MPRINT(EM_DIAGRAM):   end;
66615     +   else do;
MPRINT(EM_DIAGRAM):   else do;
66616     +      WallType1 = .;
MPRINT(EM_DIAGRAM):   WallType1 = .;
66617     +      WallType2 = .;
MPRINT(EM_DIAGRAM):   WallType2 = .;
66618     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
66619     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66620     +   end;
MPRINT(EM_DIAGRAM):   end;
66621     +end;
MPRINT(EM_DIAGRAM):   end;
66622     +
66623     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66624     +*** Checking missing input Interval
66625     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
66626     +
66627     +IF NMISS(
66628     +   Age ,
66629     +   Basement ,
66630     +   Baths ,
66631     +   FirePlace ,
66632     +   FirstFloor ,
66633     +   GarageSize ,
66634     +   SecondFloor ,
66635     +   TotalArea ,
66636     +   UpperArea   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( Age , Basement , Baths , FirePlace , FirstFloor , GarageSize , SecondFloor , TotalArea , UpperArea ) THEN DO;
66637     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
66638     +
66639     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
66640     +END;
MPRINT(EM_DIAGRAM):   END;
66641     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66642     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
66643     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66644     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
66645     +   S_Age  =    -5.79800632867022 +     0.12225218876584 * Age ;
MPRINT(EM_DIAGRAM):   S_Age = -5.79800632867022 + 0.12225218876584 * Age ;
66646     +   S_Basement  =    -0.49458207878395 +     0.00334997337812 * Basement ;
MPRINT(EM_DIAGRAM):   S_Basement = -0.49458207878395 + 0.00334997337812 * Basement ;
66647     +   S_Baths  =    -1.76411714218363 +     1.10829261382142 * Baths ;
MPRINT(EM_DIAGRAM):   S_Baths = -1.76411714218363 + 1.10829261382142 * Baths ;
66648     +   S_FirePlace  =    -2.01186859107483 +     2.33291145135273 * FirePlace ;
MPRINT(EM_DIAGRAM):   S_FirePlace = -2.01186859107483 + 2.33291145135273 * FirePlace ;
66649     +   S_FirstFloor  =    -5.35340382063727 +     0.00510704735291 * FirstFloor ;
MPRINT(EM_DIAGRAM):   S_FirstFloor = -5.35340382063727 + 0.00510704735291 * FirstFloor ;
66650     +   S_GarageSize  =    -1.89394092412704 +     1.79512661504215 * GarageSize ;
MPRINT(EM_DIAGRAM):   S_GarageSize = -1.89394092412704 + 1.79512661504215 * GarageSize ;
66651     +   S_SecondFloor  =    -0.29097603119759 +      0.0043289957552 * SecondFloor
66652     +         ;
MPRINT(EM_DIAGRAM):   S_SecondFloor = -0.29097603119759 + 0.0043289957552 * SecondFloor ;
66653     +   S_TotalArea  =    -4.25637698545192 +     0.00299693547373 * TotalArea ;
MPRINT(EM_DIAGRAM):   S_TotalArea = -4.25637698545192 + 0.00299693547373 * TotalArea ;
66654     +   S_UpperArea  =    -1.23567045229017 +     0.00405418335138 * UpperArea ;
MPRINT(EM_DIAGRAM):   S_UpperArea = -1.23567045229017 + 0.00405418335138 * UpperArea ;
66655     +END;
MPRINT(EM_DIAGRAM):   END;
66656     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
66657     +   IF MISSING( Age ) THEN S_Age  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Age ) THEN S_Age = . ;
66658     +   ELSE S_Age  =    -5.79800632867022 +     0.12225218876584 * Age ;
MPRINT(EM_DIAGRAM):   ELSE S_Age = -5.79800632867022 + 0.12225218876584 * Age ;
66659     +   IF MISSING( Basement ) THEN S_Basement  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Basement ) THEN S_Basement = . ;
66660     +   ELSE S_Basement  =    -0.49458207878395 +     0.00334997337812 * Basement ;
MPRINT(EM_DIAGRAM):   ELSE S_Basement = -0.49458207878395 + 0.00334997337812 * Basement ;
66661     +   IF MISSING( Baths ) THEN S_Baths  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Baths ) THEN S_Baths = . ;
66662     +   ELSE S_Baths  =    -1.76411714218363 +     1.10829261382142 * Baths ;
MPRINT(EM_DIAGRAM):   ELSE S_Baths = -1.76411714218363 + 1.10829261382142 * Baths ;
66663     +   IF MISSING( FirePlace ) THEN S_FirePlace  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( FirePlace ) THEN S_FirePlace = . ;
66664     +   ELSE S_FirePlace  =    -2.01186859107483 +     2.33291145135273 * FirePlace
66665     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_FirePlace = -2.01186859107483 + 2.33291145135273 * FirePlace ;
66666     +   IF MISSING( FirstFloor ) THEN S_FirstFloor  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( FirstFloor ) THEN S_FirstFloor = . ;
66667     +   ELSE S_FirstFloor  =    -5.35340382063727 +     0.00510704735291 *
66668     +        FirstFloor ;
MPRINT(EM_DIAGRAM):   ELSE S_FirstFloor = -5.35340382063727 + 0.00510704735291 * FirstFloor ;
66669     +   IF MISSING( GarageSize ) THEN S_GarageSize  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( GarageSize ) THEN S_GarageSize = . ;
66670     +   ELSE S_GarageSize  =    -1.89394092412704 +     1.79512661504215 *
66671     +        GarageSize ;
MPRINT(EM_DIAGRAM):   ELSE S_GarageSize = -1.89394092412704 + 1.79512661504215 * GarageSize ;
66672     +   IF MISSING( SecondFloor ) THEN S_SecondFloor  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SecondFloor ) THEN S_SecondFloor = . ;
66673     +   ELSE S_SecondFloor  =    -0.29097603119759 +      0.0043289957552 *
66674     +        SecondFloor ;
MPRINT(EM_DIAGRAM):   ELSE S_SecondFloor = -0.29097603119759 + 0.0043289957552 * SecondFloor ;
66675     +   IF MISSING( TotalArea ) THEN S_TotalArea  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( TotalArea ) THEN S_TotalArea = . ;
66676     +   ELSE S_TotalArea  =    -4.25637698545192 +     0.00299693547373 * TotalArea
66677     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_TotalArea = -4.25637698545192 + 0.00299693547373 * TotalArea ;
66678     +   IF MISSING( UpperArea ) THEN S_UpperArea  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( UpperArea ) THEN S_UpperArea = . ;
66679     +   ELSE S_UpperArea  =    -1.23567045229017 +     0.00405418335138 * UpperArea
66680     +         ;
MPRINT(EM_DIAGRAM):   ELSE S_UpperArea = -1.23567045229017 + 0.00405418335138 * UpperArea ;
66681     +END;
MPRINT(EM_DIAGRAM):   END;
66682     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66683     +*** Writing the Node bin ;
MPRINT(EM_DIAGRAM):   *** Writing the Node bin ;
66684     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66685     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66686     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
66687     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66688     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66689     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
66690     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66691     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
66692     +   H11  =     20.8288312527415 * S_Age  +     6.85079869815029 * S_Basement
66693     +          +    -3.36547636721141 * S_Baths  +     5.87348930230314 *
66694     +        S_FirePlace  +    -7.27353406960516 * S_FirstFloor
66695     +          +     20.2441756667926 * S_GarageSize  +     6.10111963584497 *
66696     +        S_SecondFloor  +    -6.66694048070819 * S_TotalArea
66697     +          +    -8.70959912917795 * S_UpperArea ;
MPRINT(EM_DIAGRAM):   H11 = 20.8288312527415 * S_Age + 6.85079869815029 * S_Basement + -3.36547636721141 * S_Baths + 5.87348930230314 * S_FirePlace + -7.27353406960516 * S_FirstFloor + 20.2441756667926 * S_GarageSize + 6.10111963584497 * S_SecondFloor + 
-6.66694048070819 * S_TotalArea + -8.70959912917795 * S_UpperArea ;
66698     +   H12  =     10.6130084030609 * S_Age  +     0.06518128670181 * S_Basement
66699     +          +     -1.2800594309462 * S_Baths  +     -1.9026009631468 *
66700     +        S_FirePlace  +    -8.13540387024598 * S_FirstFloor
66701     +          +    -4.26028301979254 * S_GarageSize  +     9.77550207180225 *
66702     +        S_SecondFloor  +    -5.11045925561562 * S_TotalArea
66703     +          +    -8.80684096235056 * S_UpperArea ;
MPRINT(EM_DIAGRAM):   H12 = 10.6130084030609 * S_Age + 0.06518128670181 * S_Basement + -1.2800594309462 * S_Baths + -1.9026009631468 * S_FirePlace + -8.13540387024598 * S_FirstFloor + -4.26028301979254 * S_GarageSize + 9.77550207180225 * S_SecondFloor + 
-5.11045925561562 * S_TotalArea + -8.80684096235056 * S_UpperArea ;
66704     +   H13  =    -1.62638015241576 * S_Age  +     0.17835440510199 * S_Basement
66705     +          +    -0.47760139391044 * S_Baths  +     1.23916642847139 *
66706     +        S_FirePlace  +     -2.6601728675208 * S_FirstFloor
66707     +          +     6.30709787750877 * S_GarageSize  +     10.9811095291095 *
66708     +        S_SecondFloor  +     3.89258982642337 * S_TotalArea
66709     +          +    -3.02954537381811 * S_UpperArea ;
MPRINT(EM_DIAGRAM):   H13 = -1.62638015241576 * S_Age + 0.17835440510199 * S_Basement + -0.47760139391044 * S_Baths + 1.23916642847139 * S_FirePlace + -2.6601728675208 * S_FirstFloor + 6.30709787750877 * S_GarageSize + 10.9811095291095 * S_SecondFloor + 
3.89258982642337 * S_TotalArea + -3.02954537381811 * S_UpperArea ;
66710     +   H11  = H11  +    -6.50435321735439 * CentralAir0 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -6.50435321735439 * CentralAir0 ;
66711     +   H12  = H12  +     5.23476103837851 * CentralAir0 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 5.23476103837851 * CentralAir0 ;
66712     +   H13  = H13  +    -1.65946101157946 * CentralAir0 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -1.65946101157946 * CentralAir0 ;
66713     +   H11  = H11  +     13.2536314783556 * BasementType0
66714     +          +     8.53133008760714 * BasementType1  +     0.56324337358479 *
66715     +        ConstructionType1  +      3.3564335892726 * ConstructionType2
66716     +          +     1.14539912832644 * GarageType0  +     1.58774341463134 *
66717     +        GarageType1  +      8.8976533682871 * GarageType2
66718     +          +    -3.73619344175417 * GarageType3  +     1.12451162075893 *
66719     +        GarageType4  +     8.78498105448465 * LotSize1
66720     +          +     0.42366513958359 * LotSize2  +     13.5677805097637 *
66721     +        Neighborhood1  +     2.14852781244836 * WallType1
66722     +          +     5.67050453528512 * WallType2 ;
MPRINT(EM_DIAGRAM):   H11 = H11 + 13.2536314783556 * BasementType0 + 8.53133008760714 * BasementType1 + 0.56324337358479 * ConstructionType1 + 3.3564335892726 * ConstructionType2 + 1.14539912832644 * GarageType0 + 1.58774341463134 * GarageType1 + 
8.8976533682871 * GarageType2 + -3.73619344175417 * GarageType3 + 1.12451162075893 * GarageType4 + 8.78498105448465 * LotSize1 + 0.42366513958359 * LotSize2 + 13.5677805097637 * Neighborhood1 + 2.14852781244836 * WallType1 + 5.67050453528512 * WallType2 ;
66723     +   H12  = H12  +     7.66955372286829 * BasementType0
66724     +          +    -8.73066216590974 * BasementType1  +     23.5653250443181 *
66725     +        ConstructionType1  +     2.11127274928508 * ConstructionType2
66726     +          +      11.824454390871 * GarageType0  +    -12.2102535974649 *
66727     +        GarageType1  +    -12.2564813758267 * GarageType2
66728     +          +    -2.49731621962372 * GarageType3  +      0.9647934720046 *
66729     +        GarageType4  +    -4.67336075437814 * LotSize1
66730     +          +     8.07675667956709 * LotSize2  +       5.357475327314 *
66731     +        Neighborhood1  +     15.0927125893857 * WallType1
66732     +          +     8.83353157035109 * WallType2 ;
MPRINT(EM_DIAGRAM):   H12 = H12 + 7.66955372286829 * BasementType0 + -8.73066216590974 * BasementType1 + 23.5653250443181 * ConstructionType1 + 2.11127274928508 * ConstructionType2 + 11.824454390871 * GarageType0 + -12.2102535974649 * GarageType1 + 
-12.2564813758267 * GarageType2 + -2.49731621962372 * GarageType3 + 0.9647934720046 * GarageType4 + -4.67336075437814 * LotSize1 + 8.07675667956709 * LotSize2 + 5.357475327314 * Neighborhood1 + 15.0927125893857 * WallType1 + 8.83353157035109 * WallType2 ;
66733     +   H13  = H13  +    -4.10438331026384 * BasementType0
66734     +          +    -2.78852746806888 * BasementType1  +      9.1197257283848 *
66735     +        ConstructionType1  +     9.95993746370288 * ConstructionType2
66736     +          +     7.50990557902757 * GarageType0  +    -2.87649922677036 *
66737     +        GarageType1  +    -1.95379030908894 * GarageType2
66738     +          +     0.35884481891863 * GarageType3  +     -4.2599790016529 *
66739     +        GarageType4  +    -6.44191524747859 * LotSize1
66740     +          +    -3.99224957796703 * LotSize2  +    -0.27911699149498 *
66741     +        Neighborhood1  +     2.26145968118917 * WallType1
66742     +          +     3.59881778615552 * WallType2 ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -4.10438331026384 * BasementType0 + -2.78852746806888 * BasementType1 + 9.1197257283848 * ConstructionType1 + 9.95993746370288 * ConstructionType2 + 7.50990557902757 * GarageType0 + -2.87649922677036 * GarageType1 + 
-1.95379030908894 * GarageType2 + 0.35884481891863 * GarageType3 + -4.2599790016529 * GarageType4 + -6.44191524747859 * LotSize1 + -3.99224957796703 * LotSize2 + -0.27911699149498 * Neighborhood1 + 2.26145968118917 * WallType1 + 3.59881778615552 * 
WallType2 ;
66743     +   H11  =     7.50883561626074 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 7.50883561626074 + H11 ;
66744     +   H12  =    -12.0514974902983 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = -12.0514974902983 + H12 ;
66745     +   H13  =    -8.46602867977754 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = -8.46602867977754 + H13 ;
66746     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
66747     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
66748     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
66749     +END;
MPRINT(EM_DIAGRAM):   END;
66750     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
66751     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
66752     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
66753     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
66754     +END;
MPRINT(EM_DIAGRAM):   END;
66755     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66756     +*** Writing the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intervalTargets ;
66757     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
66758     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
66759     +   P_SalePrice  =    -530.197082139242 * H11  +    -1939.73401065351 * H12
66760     +          +     6303.94688435578 * H13 ;
MPRINT(EM_DIAGRAM):   P_SalePrice = -530.197082139242 * H11 + -1939.73401065351 * H12 + 6303.94688435578 * H13 ;
66761     +   P_SalePrice  =     76098.8597249232 + P_SalePrice ;
MPRINT(EM_DIAGRAM):   P_SalePrice = 76098.8597249232 + P_SalePrice ;
66762     +END;
MPRINT(EM_DIAGRAM):   END;
66763     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
66764     +   P_SalePrice  = .;
MPRINT(EM_DIAGRAM):   P_SalePrice = .;
66765     +END;
MPRINT(EM_DIAGRAM):   END;
66766     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
66767     +   P_SalePrice  =     75984.2752293578;
MPRINT(EM_DIAGRAM):   P_SalePrice = 75984.2752293578;
66768     +END;
MPRINT(EM_DIAGRAM):   END;
66769     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
66770     +*** Writing the Residuals  of the Node intervalTargets ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node intervalTargets ;
66771     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
66772     +IF MISSING( SalePrice ) THEN R_SalePrice  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( SalePrice ) THEN R_SalePrice = . ;
66773     +ELSE R_SalePrice  = SalePrice  - P_SalePrice ;
MPRINT(EM_DIAGRAM):   ELSE R_SalePrice = SalePrice - P_SalePrice ;
66774     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
66775     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
66776     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
66777     +drop
66778     +H11
66779     +H12
66780     +H13
66781     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
66782     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
66783      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
66784      quit;
66785      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
66786      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
66787      * Neural2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural2: Computing metadata for TRAIN data;
66788      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\Neural2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural2_TRAIN out=WORK.M135CR3W noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M135CR3W;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M135CR3W(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M135CR3W;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M135CR3W;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0JDTQBM NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JDTQBM;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JDTQBM;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M04GW0JC(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JDTQBM;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JDTQBM;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JDTQBM;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0JDTQBM;
MPRINT(EMADVISECOLUMNS):   set WORK.M0JDTQBM;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural2";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_SALEPRICE") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("R_SALEPRICE") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural2";
MPRINT(EM_DIAGRAM):   when("SALEPRICE") model = "Neural2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
67136      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
67137      set EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO;
67138      where DATA='Neural2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
67139      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL2_EMINFO.
      WHERE (DATA='Neural2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

67140      data EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural2_EMINFO;
67141      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
67142      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
67143      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_DIAGRAM):   run;
67147      run;
67148      data EMWS1.Neural2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural2_EMINFO;
67149      set EMWS1.Neural2_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural2_EMINFO WORK.MODELTEMP_INFO;
67150      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.03 seconds
      

67151      proc sort data = EMWS1.Neural2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural2_EMINFO NOTHREADS;
67152      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
67153      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL2_EMINFO.
NOTE: The data set EMWS1.NEURAL2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.10 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS1.NEURAL2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS1.NEURAL2_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
