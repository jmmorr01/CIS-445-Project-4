*------------------------------------------------------------*
User:                jmmorr01
Date:                November 19, 2018
Time:                23:47:05
Site:                70080761
Platform:            X64_8PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:46:50" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                November 19, 2018
Time:                23:46:50
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3PLVNTY "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3PLVNTY new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:46:50" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                jmmorr01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70080761";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:46:50" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                jmmorr01";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
50570      proc freq data=EMWS1.MBR2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.MBR2_VariableSet noprint;
50571      table ROLE*LEVEL/out=WORK.MBR2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.MBR2META;
50572      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.MBR2_VARIABLESET.
NOTE: The data set WORK.MBR2META has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
 
 
50573      proc print data=WORK.MBR2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.MBR2META label noobs;
50574      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
50575      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
50576      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
50577      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
50578      run;
 
NOTE: There were 3 observations read from the data set WORK.MBR2META.
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
50579      title10;
MPRINT(EM_DIAGRAM):   title10;
50580      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
>>>>>>>>>>>>>> TARGET(   NAME='SalePrice'
                         ROLE='TARGET'
                         LEVEL='INTERVAL'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='QUANTITY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         REPORT='N'
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='N'
                         LABEL='SalePrice'
                         FORMAT='BEST.'
                         INFORMAT=''
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=8
                         USE='Y'
                      )[24573]
MPRINT(EM_DIAGRAM):
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Part_TRAIN dmdbcat=WORK.EM_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   SalePrice
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   target SalePrice ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS1 nolist;
MPRINT(EM_DIAGRAM):   modify MBR2_SalePrice_DD(type=PROFIT label= SalePrice);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MBR2: Determine decision variables for SalePrice;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.MBR2_SCORE;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_TRAIN;
MPRINT(EM_DIAGRAM):   keep SalePrice;
MPRINT(EM_DIAGRAM):   keep 'P_SalePrice'n;
MPRINT(EM_DIAGRAM):   'P_SalePrice'n = 0.5;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MBR2_SalePrice_DM;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_SalePrice_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_ ^in('FREQ', 'BESTPROFIT', 'COMPUTEDPROFIT', 'EXPECTEDPROFIT', 'BESTLOSS', 'COMPUTEDLOSS', 'EXPECTEDLOSS', 'ROI', 'INVESTMENTCOST', 'MODELDECISION');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify SalePrice(type=PROFIT label= SalePrice);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data EMWS1.MBR2_SalePrice_DM;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_SalePrice_DM end=eof;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if eof then do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
"No decisions defined for target "SalePrice"."
50641      proc print data = EMWS1.MBR2_SalePrice_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.MBR2_SalePrice_DM noobs label;
50642      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
50643      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
50644      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
50645      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
50646      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
50647      run;
 
NOTE: There were 3 observations read from the data set EMWS1.MBR2_SALEPRICE_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 14.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
50648      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MBR2: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M1BCHTDO;
MPRINT(EM_DIAGRAM):   set WORK.M1BCHTDO;
MPRINT(EM_DIAGRAM):   where(USE = 'Y' or (ROLE in ('INPUT', 'TARGET', 'ID') and USE = 'D'));
MPRINT(EM_DIAGRAM):   if (ROLE = 'REJECTED') then ROLE = 'INPUT';
MPRINT(EM_DIAGRAM):   if (ROLE in ('ID', 'INPUT') and TYPE = 'C') then delete;
MPRINT(EM_DIAGRAM):   run;
NOTE: There were 3 observations read from the data set EMWS1.MBR2_SALEPRICE_DD.
NOTE: The data set WORK.SALEPRICE has 3 observations and 1 variables.
NOTE: There were 3 observations read from the data set EMWS1.MBR2_SALEPRICE_DD.
NOTE: The data set WORK.SALEPRICE has 3 observations and 1 variables.
50659      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
50660      * MBR2: Create decision matrix;
MPRINT(EM_DIAGRAM):   * MBR2: Create decision matrix;
50661      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
50662      data WORK.SalePrice(label="SalePrice");
MPRINT(EM_DIAGRAM):   data WORK.SalePrice(label="SalePrice");
50663        length   SalePrice                            8
50664                 ;
MPRINT(EM_DIAGRAM):   length SalePrice 8 ;
50665
50666        label    SalePrice="SalePrice"
50667                 ;
MPRINT(EM_DIAGRAM):   label SalePrice= "SalePrice" ;
50668       SalePrice=5014;
MPRINT(EM_DIAGRAM):   SalePrice=5014;
50669      output;
MPRINT(EM_DIAGRAM):   output;
50670       SalePrice=135363;
MPRINT(EM_DIAGRAM):   SalePrice=135363;
50671      output;
MPRINT(EM_DIAGRAM):   output;
50672       SalePrice=75984.2752293578;
MPRINT(EM_DIAGRAM):   SalePrice=75984.2752293578;
50673      output;
MPRINT(EM_DIAGRAM):   output;
50674      ;
MPRINT(EM_DIAGRAM):   ;
50675      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SALEPRICE has 3 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
50676      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
50677      modify SalePrice(type=PROFIT label=SalePrice);
MPRINT(EM_DIAGRAM):   modify SalePrice(type=PROFIT label= SalePrice);
MPRINT(EM_DIAGRAM):   run;
50678      run;
 
NOTE: MODIFY was successful for WORK.SALEPRICE.DATA.
50679      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
50680      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
50681      * MBR2: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * MBR2: DMDBClass Macro ;
50682      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
50683      %macro DMDBClass;
50684
50685      %mend DMDBClass;
50686      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
50687      * MBR2: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * MBR2: DMDBVar Macro ;
50688      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
50689      %macro DMDBVar;
50690          Age Basement Baths FirePlace FirstFloor GarageSize SalePrice SecondFloor
50691         TotalArea UpperArea
50692      %mend DMDBVar;
50693      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
50694      * MBR2: Create DMDB;
MPRINT(EM_DIAGRAM):   * MBR2: Create DMDB;
50695      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
50696      proc dmdb batch data=EMWS1.Part_TRAIN
50697      dmdbcat=WORK.MBR2_DMDB
50698      maxlevel = 513
50699      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS1.Part_TRAIN dmdbcat=WORK.MBR2_DMDB maxlevel = 513 ;
50700      id
50701      _dataobs_
50702      ;
MPRINT(EM_DIAGRAM):   id _dataobs_ ;
MPRINT(EM_DIAGRAM):   var
50703      var %DMDBVar;
MPRINT(DMDBVAR):   Age Basement Baths FirePlace FirstFloor GarageSize SalePrice SecondFloor TotalArea UpperArea
MPRINT(EM_DIAGRAM):  ;
50704      target
50705      SalePrice
50706      ;
MPRINT(EM_DIAGRAM):   target SalePrice ;
50707      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 218   Memory used = 511K.
NOTE: There were 218 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * MBR2: Interval Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
50708      quit;
50709      *------------------------------------------------------------* ;
50710      * MBR2: Interval Variables Macro ;
50711      *------------------------------------------------------------* ;
50712      %macro pmbrvar;
50713          Age Basement Baths FirePlace FirstFloor GarageSize SecondFloor TotalArea
50714         UpperArea
50715      %mend pmbrvar;
50716      proc pmbr data=EMWS1.Part_TRAIN dmdbcat=WORK.MBR2_DMDB
50717      validata = EMWS1.PART_VALIDATE
50718      outest = EMWS1.MBR2_ESTIMATE
50719      k = 10
50720      epsilon = 0
50721      buckets = 8
50722      method = RDTREE
50723      weighted
50724      neighbors
50725      ;
MPRINT(EM_DIAGRAM):   proc pmbr data=EMWS1.Part_TRAIN dmdbcat=WORK.MBR2_DMDB validata = EMWS1.PART_VALIDATE outest = EMWS1.MBR2_ESTIMATE k = 10 epsilon = 0 buckets = 8 method = RDTREE weighted neighbors ;
MPRINT(EM_DIAGRAM):   var
50726      var %pmbrvar;
MPRINT(PMBRVAR):   Age Basement Baths FirePlace FirstFloor GarageSize SecondFloor TotalArea UpperArea
MPRINT(EM_DIAGRAM):  ;
50727      target SalePrice;
MPRINT(EM_DIAGRAM):   target SalePrice;
50728      score data=EMWS1.PART_TRAIN
50729      out=EMWS1.MBR2_TRAIN
50730      role = TRAIN
50731      ;
MPRINT(EM_DIAGRAM):   score data=EMWS1.PART_TRAIN out=EMWS1.MBR2_TRAIN role = TRAIN ;
50732      id _dataobs_;
MPRINT(EM_DIAGRAM):   id _dataobs_;
50733      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 218 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 145 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 218 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set EMWS1.MBR2_ESTIMATE has 1 observations and 40 variables.
NOTE: The data set EMWS1.MBR2_TRAIN has 218 observations and 31 variables.
NOTE: PROCEDURE PMBR used (Total process time):
      real time           0.26 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
50734      quit;
 
NOTE: There were 3 observations read from the data set EMWS1.MBR2_SALEPRICE_DD.
NOTE: The data set WORK.SALEPRICE has 3 observations and 1 variables.
NOTE: There were 3 observations read from the data set EMWS1.MBR2_SALEPRICE_DD.
NOTE: The data set WORK.SALEPRICE has 3 observations and 1 variables.
NOTE: There were 3 observations read from the data set EMWS1.MBR2_SALEPRICE_DD.
NOTE: The data set WORK.SALEPRICE has 3 observations and 1 variables.
NOTE: There were 3 observations read from the data set EMWS1.MBR2_SALEPRICE_DD.
NOTE: The data set WORK.SALEPRICE has 3 observations and 1 variables.
50735      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
50736      * MBR2: Create decision matrix;
MPRINT(EM_DIAGRAM):   * MBR2: Create decision matrix;
50737      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
50738      data WORK.SalePrice(label="SalePrice");
MPRINT(EM_DIAGRAM):   data WORK.SalePrice(label="SalePrice");
50739        length   SalePrice                            8
50740                 ;
MPRINT(EM_DIAGRAM):   length SalePrice 8 ;
50741
50742        label    SalePrice="SalePrice"
50743                 ;
MPRINT(EM_DIAGRAM):   label SalePrice= "SalePrice" ;
50744       SalePrice=5014;
MPRINT(EM_DIAGRAM):   SalePrice=5014;
50745      output;
MPRINT(EM_DIAGRAM):   output;
50746       SalePrice=135363;
MPRINT(EM_DIAGRAM):   SalePrice=135363;
50747      output;
MPRINT(EM_DIAGRAM):   output;
50748       SalePrice=75984.2752293578;
MPRINT(EM_DIAGRAM):   SalePrice=75984.2752293578;
50749      output;
MPRINT(EM_DIAGRAM):   output;
50750      ;
MPRINT(EM_DIAGRAM):   ;
50751      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.SALEPRICE has 3 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
50752      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
50753      modify SalePrice(type=PROFIT label=SalePrice);
MPRINT(EM_DIAGRAM):   modify SalePrice(type=PROFIT label= SalePrice);
MPRINT(EM_DIAGRAM):   run;
50754      run;
 
NOTE: MODIFY was successful for WORK.SALEPRICE.DATA.
50755      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
50756      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
50757      * MBR2: Interval Variables Macro ;
MPRINT(EM_DIAGRAM):   * MBR2: Interval Variables Macro ;
50758      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
50759      %macro pmbrvar;
50760          Age Basement Baths FirePlace FirstFloor GarageSize SecondFloor TotalArea
50761         UpperArea
50762      %mend pmbrvar;
50763      proc pmbr data=EMWS1.Part_TRAIN dmdbcat=WORK.MBR2_DMDB
50764      outest = WORK.MBR2_OUTEST
50765      k = 10
50766      epsilon = 0
50767      buckets = 8
50768      method = RDTREE
50769      weighted
50770      neighbors
50771      ;
MPRINT(EM_DIAGRAM):   proc pmbr data=EMWS1.Part_TRAIN dmdbcat=WORK.MBR2_DMDB outest = WORK.MBR2_OUTEST k = 10 epsilon = 0 buckets = 8 method = RDTREE weighted neighbors ;
MPRINT(EM_DIAGRAM):   var
50772      var %pmbrvar;
MPRINT(PMBRVAR):   Age Basement Baths FirePlace FirstFloor GarageSize SecondFloor TotalArea UpperArea
MPRINT(EM_DIAGRAM):  ;
50773      target SalePrice;
MPRINT(EM_DIAGRAM):   target SalePrice;
50774      score data=EMWS1.PART_VALIDATE
50775      out=EMWS1.MBR2_VALIDATE
50776      role = VALID
50777      ;
MPRINT(EM_DIAGRAM):   score data=EMWS1.PART_VALIDATE out=EMWS1.MBR2_VALIDATE role = VALID ;
50778      id _dataobs_;
MPRINT(EM_DIAGRAM):   id _dataobs_;
50779      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 218 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 145 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: The data set WORK.MBR2_OUTEST has 1 observations and 29 variables.
NOTE: The data set EMWS1.MBR2_VALIDATE has 145 observations and 31 variables.
NOTE: PROCEDURE PMBR used (Total process time):
      real time           0.14 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
50780      quit;
 
50781      data EMWS1.MBR2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.MBR2_EMOUTFIT;
50782      length TARGET $32;
MPRINT(EM_DIAGRAM):   length TARGET $32;
50783      target = "SalePrice";
MPRINT(EM_DIAGRAM):   target = "SalePrice";
50784      set EMWS1.MBR2_ESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_ESTIMATE;
50785      keep TARGET _NW_--_VMAX_;
MPRINT(EM_DIAGRAM):   keep TARGET _NW_--_VMAX_;
50786      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.MBR2_ESTIMATE.
NOTE: The data set EMWS1.MBR2_EMOUTFIT has 1 observations and 31 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):   delete MBR2_DMDB;
MPRINT(EM_DIAGRAM):   delete MBR2_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:46:57" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                November 19, 2018
Time:                23:46:57
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2NB0G16 "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2NB0G16 new;
MPRINT(EM_DIAGRAM):   run;
50893      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
50894      * MBR2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MBR2: Computing metadata for TRAIN data;
50895      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.MBR2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.MBR2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options fmterr;
MPRINT(EMADVISECOLUMNS):   data _metaTestView;
MPRINT(EMADVISECOLUMNS):   set EMWS1.MBR2_TRAIN;
MPRINT(EMADVISECOLUMNS):   if _N_=1 then do;
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   stop;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.MBR2_TRAIN out=WORK.M0YFNTM8 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0YFNTM8;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0YFNTM8(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0YFNTM8;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0YFNTM8;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M11YQB9T NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M11YQB9T;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M11YQB9T;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M29B8U6H(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M11YQB9T;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M11YQB9T;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M11YQB9T;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M11YQB9T;
MPRINT(EMADVISECOLUMNS):   set WORK.M11YQB9T;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MBR2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MBR2";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_SALEPRICE") creator = "MBR2";
MPRINT(EM_DIAGRAM):   when("R_SALEPRICE") creator = "MBR2";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "MBR2";
MPRINT(EM_DIAGRAM):   when("SALEPRICE") model = "MBR2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MBR2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
51251      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
51252      set EMWS1.MBR2_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_EMINFO;
51253      where DATA='MBR2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='MBR2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
51254      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.MBR2_EMINFO.
      WHERE (DATA='MBR2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
51255      data EMWS1.MBR2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.MBR2_EMINFO;
51256      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
51257      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
51258      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.MBR2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
51262      run;
51263      data EMWS1.MBR2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.MBR2_EMINFO;
51264      set EMWS1.MBR2_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_EMINFO WORK.MODELTEMP_INFO;
51265      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.MBR2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.MBR2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
 
51266      proc sort data = EMWS1.MBR2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.MBR2_EMINFO NOTHREADS;
51267      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
51268      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.MBR2_EMINFO.
NOTE: The data set EMWS1.MBR2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.11 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "November 19, 2018" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "23:46:58" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                November 19, 2018
Time:                23:46:58
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2QMFUET "J:\CIS-445-Project-4-master\CIS-445-Project-4-master\Project_4\Workspaces\EMWS1\MBR2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2QMFUET new;
MPRINT(EM_DIAGRAM):   run;
51292      data EMWS1.MBR2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.MBR2_EMOUTFIT;
51293      set EMWS1.MBR2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_EMOUTFIT;
51294      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
51295      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
51296      if upcase(TARGET) eq "SALEPRICE" then TargetLabel = 'SalePrice';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "SALEPRICE" then TargetLabel = 'SalePrice';
51297      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.MBR2_EMOUTFIT.
NOTE: The data set EMWS1.MBR2_EMOUTFIT has 1 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.13 seconds
      cpu time            0.01 seconds
 
 
51298      proc sort data=EMWS1.MBR2_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.MBR2_EMREPORTFIT nothreads;
51299      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
51300      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set EMWS1.MBR2_EMREPORTFIT.
NOTE: The data set EMWS1.MBR2_EMREPORTFIT has 19 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.10 seconds
      cpu time            0.04 seconds
 
 
51301      %let _EMwarndup = 0;
51302      %let _EMtargetdup =;
51303      %let _EMASEtargetdup =;
51304      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
51305      set EMWS1.MBR2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_EMOUTFIT;
51306      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
51307      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
51308      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
51309      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
51310      end;
MPRINT(EM_DIAGRAM):   end;
51311      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.MBR2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
51312      proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
51313      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
51314      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 18 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
51315      proc sort data=EMWS1.MBR2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.MBR2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
51316      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
51317      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS1.MBR2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 11 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
51318      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
51319      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
51320      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
51321      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 11 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 18 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
51322      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
51323      set EMWS1.MBR2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_CMeta_TRAIN;
51324      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
51325      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.MBR2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
51326      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
51327      set EMWS1.MBR2_TRAIN(keep=
51328      P_SalePrice
51329      R_SalePrice
51330      _WARN_
51331      SalePrice
51332      );
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_TRAIN(keep= P_SalePrice R_SalePrice _WARN_ SalePrice );
51333      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 218 observations read from the data set EMWS1.MBR2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 218 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK._RESMETA;
MPRINT(EM_DIAGRAM):   length NAME $32 LEVEL $8 ROLE $32 type $1;
MPRINT(EM_DIAGRAM):   NAME="R_SalePrice";
MPRINT(EM_DIAGRAM):   ROLE='INPUT';
MPRINT(EM_DIAGRAM):   LEVEL='INTERVAL';
MPRINT(EM_DIAGRAM):   TYPE='N';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * MBR2: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MBR2: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc stdize data = EM_temp_assessdata out=_null_ outstat=WORK.MBR2_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 ) ;
MPRINT(EM_DIAGRAM):   var
MPRINT(STDIZEVAR):   R_SalePrice
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.MBR2_STAT;
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION', 'SCALE', 'P0', 'P5', 'P10', 'P15', 'P20' 'P25', 'P50', 'P75', 'P80', 'P85', 'P90', 'P95', 'P100');
MPRINT(EM_DIAGRAM):   if _TYPE_ = 'LOCATION' then _TYPE_='MEAN';
MPRINT(EM_DIAGRAM):   else if _TYPE_ = 'SCALE' then _TYPE_='STD';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MBR2BOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MBR2BOXDATA out=WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   id _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   UPPERWHISKER = P75 + 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   LOWERWHISKER = P25 - 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   if P100<=UPPERWHISKER then do;
MPRINT(EM_DIAGRAM):   UPPERWHISKER=P100;
MPRINT(EM_DIAGRAM):   P100=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if P95<=UPPERWHISKER then P95=.;
MPRINT(EM_DIAGRAM):   if P90<=UPPERWHISKER then P90=.;
MPRINT(EM_DIAGRAM):   if P85<=UPPERWHISKER then P85=.;
MPRINT(EM_DIAGRAM):   if P80<=UPPERWHISKER then P80=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P0 then do;
MPRINT(EM_DIAGRAM):   LOWERWHISKER=P0;
MPRINT(EM_DIAGRAM):   P0=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P20 then P20=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P15 then P15=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P10 then P10=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P5 then P5=.;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MBR2BOXDATA out=WORK.MBR2BOXDATA(rename=(COL1=VALUE _name_=_VARIABLE_)) NAME=XLABEL;
MPRINT(EM_DIAGRAM):   by _NAME_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   length XLABEL $12;
MPRINT(EM_DIAGRAM):   set WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   label _VARIABLE_=;
MPRINT(EM_DIAGRAM):   label XLABEL=;
MPRINT(EM_DIAGRAM):   where VALUE ne .;
MPRINT(EM_DIAGRAM):   if XLABEL in('P100', 'P95', 'P90', 'P85', 'P80', 'P20', 'P15', 'P10', 'P5', 'P0') then XLABEL = 'OUTLIER';
MPRINT(EM_DIAGRAM):   else if XLABEL='P50' then XLABEL='MEDIAN';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MBR2BOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by VALUE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MBR2_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200 DATAROLE $32;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label targetlabel = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   label VALUE = "Value";
MPRINT(EM_DIAGRAM):   label XLABEL = "Box Plot Marker";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Residual Variable";
MPRINT(EM_DIAGRAM):   set WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   TARGET = substr(_VARIABLE_, 3);
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "SALEPRICE" then TARGETLABEL = 'SalePrice';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_SalePrice_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("SalePrice") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("SalePrice") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_SalePrice _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_SalePrice") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_SalePrice") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_SalePrice SalePrice _tmpfreqvar_ WHERE = (SalePrice > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_SalePrice ;
MPRINT(EM_ASSESS):   VAR SalePrice ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST ( KEEP = TARGET P_LABEL LOWP UPP SCORE N _TARGETMEAN_ BIN _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_ _MAXP_ ) WORK._TEMPRANK (KEEP = BIN TARGET DATAROLE DECILE N _TARGETMEAN_ _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_
_MAXP_ ) ;
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... START OF RETAIN AREA. CONTINOUS DEP VAR ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN TARGET "SalePrice" DATAROLE "TRAIN" NUMOBS1 - NUMOBS20 0 MAXTGT1 - MAXTGT20 . MINTGT1 - MINTGT20 . MNTGT1 - MNTGT20 0 MAXPTGT1 - MAXPTGT20 . MINPTGT1 - MINPTGT20 . MNPTGT1 - MNPTGT20 0 RNUMOBS1 - RNUMOBS20 0 RMAXTGT1 -
RMAXTGT20 . RMINTGT1 - RMINTGT20 . RMNTGT1 - RMNTGT20 0 RMAXPTGT1 - RMAXPTGT20 . RMINPTGT1 - RMINPTGT20 . RMNPTGT1 - RMNPTGT20 0 ;
MPRINT(EM_ASSESS):   DROP _FREQ_ N1 NUMOBS1 - NUMOBS20 MAXTGT1 - MAXTGT20 MINTGT1 - MINTGT20 MNTGT1 - MNTGT20 MAXPTGT1 - MAXPTGT20 MINPTGT1 - MINPTGT20 MNPTGT1 - MNPTGT20 RNUMOBS1 - RNUMOBS20 RMAXTGT1 - RMAXTGT20 RMINTGT1 - RMINTGT20 RMNTGT1 - RMNTGT20
RMAXPTGT1 - RMAXPTGT20 RMINPTGT1 - RMINPTGT20 RMNPTGT1 - RMNPTGT20 ;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY MAXTGTS (20) MAXTGT1 - MAXTGT20;
MPRINT(EM_ASSESS):   ARRAY MINTGTS (20) MINTGT1 - MINTGT20;
MPRINT(EM_ASSESS):   ARRAY MNTGTS (20) MNTGT1 - MNTGT20;
MPRINT(EM_ASSESS):   ARRAY MAXPTGTS (20) MAXPTGT1 - MAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY MINPTGTS (20) MINPTGT1 - MINPTGT20;
MPRINT(EM_ASSESS):   ARRAY MNPTGTS (20) MNPTGT1 - MNPTGT20;
MPRINT(EM_ASSESS):   ARRAY RNUMOBSS (20) RNUMOBS1 - RNUMOBS20;
MPRINT(EM_ASSESS):   ARRAY RMAXTGTS (20) RMAXTGT1 - RMAXTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINTGTS (20) RMINTGT1 - RMINTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNTGTS (20) RMNTGT1 - RMNTGT20;
MPRINT(EM_ASSESS):   ARRAY RMAXPTGTS (20) RMAXPTGT1 - RMAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINPTGTS (20) RMINPTGT1 - RMINPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNPTGTS (20) RMNPTGT1 - RMNPTGT20;
MPRINT(EM_ASSESS):   IF _MEANTARGET > . THEN SalePrice = _MEANTARGET ;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   N1 + _FREQ_;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .......... Outdist Processing For Interval Target;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCRBIN = MIN (CEIL (( P_SalePrice - 63843) / 1777.84), 20);
MPRINT(EM_ASSESS):   IF SCRBIN <= 0 THEN SCRBIN = 1;
MPRINT(EM_ASSESS):   SCRBIN = 20 + 1 - SCRBIN;
MPRINT(EM_ASSESS):   NUMOBSS ( SCRBIN) = SUM (NUMOBSS ( SCRBIN) , _FREQ_ );
MPRINT(EM_ASSESS):   MNTGTS ( SCRBIN) = SUM (MNTGTS ( SCRBIN), SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   MAXTGTS ( SCRBIN) = MAX (MAXTGTS (SCRBIN), _MAXTARGET);
MPRINT(EM_ASSESS):   MINTGTS ( SCRBIN) = MIN (MINTGTS (SCRBIN), _MINTARGET);
MPRINT(EM_ASSESS):   MAXPTGTS ( SCRBIN) = MAX (MAXPTGTS ( SCRBIN), P_SalePrice);
MPRINT(EM_ASSESS):   MINPTGTS ( SCRBIN) = MIN (MINPTGTS ( SCRBIN), P_SalePrice);
MPRINT(EM_ASSESS):   MNPTGTS ( SCRBIN) = SUM (MNPTGTS ( SCRBIN), P_SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   BIN = CEIL (N1 * 20 / 218);
MPRINT(EM_ASSESS):   IF BIN <= 0 THEN BIN = 1;
MPRINT(EM_ASSESS):   IF BIN > 20 THEN BIN = 20;
MPRINT(EM_ASSESS):   IF BIN < 1 THEN BIN = 1;
MPRINT(EM_ASSESS):   BIN = 21 - BIN;
MPRINT(EM_ASSESS):   RNUMOBSS ( BIN) = SUM (RNUMOBSS ( BIN) , _FREQ_ );
MPRINT(EM_ASSESS):   RMNTGTS ( BIN) = SUM (RMNTGTS ( BIN), SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   RMAXTGTS ( BIN) = MAX (RMAXTGTS (BIN), _MAXTARGET);
MPRINT(EM_ASSESS):   RMINTGTS ( BIN) = MIN (RMINTGTS (BIN), _MINTARGET);
MPRINT(EM_ASSESS):   RMAXPTGTS ( BIN) = MAX (RMAXPTGTS ( BIN), P_SalePrice);
MPRINT(EM_ASSESS):   RMINPTGTS ( BIN) = MIN (RMINPTGTS ( BIN), P_SalePrice);
MPRINT(EM_ASSESS):   RMNPTGTS ( BIN) = SUM (RMNPTGTS ( BIN), P_SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Start of Outdist Area, Continuous Dep Var;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   UPP = 99399.8;
MPRINT(EM_ASSESS):   DO SCRBIN = 1 TO 20;
MPRINT(EM_ASSESS):   LOWP = UPP - 1777.84;
MPRINT(EM_ASSESS):   N = NUMOBSS (SCRBIN);
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = MNTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = MNPTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = MINTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = MAXTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MINP_ = MINPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MAXP_ = MAXPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   SCORE = MEAN (UPP, LOWP);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (LOWP, 12.3)) || " - " || COMPBL (PUT (UPP, 12.3));
MPRINT(EM_ASSESS):   BIN = SCRBIN;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   UPP = LOWP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO SCRBIN = .... ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Output Outranks Continuous Case ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO BIN = 1 TO 20;
MPRINT(EM_ASSESS):   N = RNUMOBSS (BIN);
MPRINT(EM_ASSESS):   DECILE = BIN * 100 / 20;
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = RMNTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = RMNPTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = RMINTGTS (BIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = RMAXTGTS (BIN);
MPRINT(EM_ASSESS):   _MINP_ = RMINPTGTS (BIN);
MPRINT(EM_ASSESS):   _MAXP_ = RMAXPTGTS (BIN);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (_MINP_, 12.3)) || " - " || COMPBL (PUT (_MAXP_, 12.3));
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO _K = 1 TO DECILEBIN ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... IF EOF ;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" _TARGETMAX_ = "Max Target" _TARGETMEAN_= "Mean Target" _TARGETMIN_ = "Min Target" DATAROLE = "Data Role" N = "Number of Observations"
TARGET = "Target Variable" LOWP = "Lower Bound" UPP = "Upper Bound" score = "Model Score" scrbin = "Bin" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Range for Predicted" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "SalePrice";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'SalePrice';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MBR2_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "SalePrice";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'SalePrice';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MBR2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
55667      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
55668      set EMWS1.MBR2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_CMeta_TRAIN;
55669      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
55670      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.MBR2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
55671      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
55672      set EMWS1.MBR2_VALIDATE(keep=
55673      P_SalePrice
55674      R_SalePrice
55675      _WARN_
55676      SalePrice
55677      );
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_VALIDATE(keep= P_SalePrice R_SalePrice _WARN_ SalePrice );
55678      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 145 observations read from the data set EMWS1.MBR2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 145 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK._RESMETA;
MPRINT(EM_DIAGRAM):   length NAME $32 LEVEL $8 ROLE $32 type $1;
MPRINT(EM_DIAGRAM):   NAME="R_SalePrice";
MPRINT(EM_DIAGRAM):   ROLE='INPUT';
MPRINT(EM_DIAGRAM):   LEVEL='INTERVAL';
MPRINT(EM_DIAGRAM):   TYPE='N';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * MBR2: STDIZE Variables Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MBR2: Computing Summary Statistics;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc stdize data = EM_temp_assessdata out=_null_ outstat=WORK.MBR2_STAT add=0 fuzz=1E-14 initial=MAD vardef=df method=STD mult=1 pctlmtd=ORD_STAT pctldef=2 pctlpts=( 0 5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 ) ;
MPRINT(EM_DIAGRAM):   var
MPRINT(STDIZEVAR):   R_SalePrice
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.MBR2_STAT;
MPRINT(EM_DIAGRAM):   where _TYPE_ in('LOCATION', 'SCALE', 'P0', 'P5', 'P10', 'P15', 'P20' 'P25', 'P50', 'P75', 'P80', 'P85', 'P90', 'P95', 'P100');
MPRINT(EM_DIAGRAM):   if _TYPE_ = 'LOCATION' then _TYPE_='MEAN';
MPRINT(EM_DIAGRAM):   else if _TYPE_ = 'SCALE' then _TYPE_='STD';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MBR2BOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MBR2BOXDATA out=WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   id _TYPE_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   set WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   UPPERWHISKER = P75 + 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   LOWERWHISKER = P25 - 1.5*abs(P75 - P25);
MPRINT(EM_DIAGRAM):   if P100<=UPPERWHISKER then do;
MPRINT(EM_DIAGRAM):   UPPERWHISKER=P100;
MPRINT(EM_DIAGRAM):   P100=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if P95<=UPPERWHISKER then P95=.;
MPRINT(EM_DIAGRAM):   if P90<=UPPERWHISKER then P90=.;
MPRINT(EM_DIAGRAM):   if P85<=UPPERWHISKER then P85=.;
MPRINT(EM_DIAGRAM):   if P80<=UPPERWHISKER then P80=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P0 then do;
MPRINT(EM_DIAGRAM):   LOWERWHISKER=P0;
MPRINT(EM_DIAGRAM):   P0=.;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P20 then P20=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P15 then P15=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P10 then P10=.;
MPRINT(EM_DIAGRAM):   if LOWERWHISKER<=P5 then P5=.;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MBR2BOXDATA out=WORK.MBR2BOXDATA(rename=(COL1=VALUE _name_=_VARIABLE_)) NAME=XLABEL;
MPRINT(EM_DIAGRAM):   by _NAME_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   length XLABEL $12;
MPRINT(EM_DIAGRAM):   set WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   label _VARIABLE_=;
MPRINT(EM_DIAGRAM):   label XLABEL=;
MPRINT(EM_DIAGRAM):   where VALUE ne .;
MPRINT(EM_DIAGRAM):   if XLABEL in('P100', 'P95', 'P90', 'P85', 'P80', 'P20', 'P15', 'P10', 'P5', 'P0') then XLABEL = 'OUTLIER';
MPRINT(EM_DIAGRAM):   else if XLABEL='P50' then XLABEL='MEDIAN';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MBR2BOXDATA NOTHREADS;
MPRINT(EM_DIAGRAM):   by VALUE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   length TARGET $32 TARGETLABEL $200 DATAROLE $32;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label targetlabel = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   label VALUE = "Value";
MPRINT(EM_DIAGRAM):   label XLABEL = "Box Plot Marker";
MPRINT(EM_DIAGRAM):   label _VARIABLE_ = "Residual Variable";
MPRINT(EM_DIAGRAM):   set WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   TARGET = substr(_VARIABLE_, 3);
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "SALEPRICE" then TARGETLABEL = 'SalePrice';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.MBR2_EMRESIDUAL;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_EMRESIDUAL WORK.MBR2BOXDATA;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_SalePrice_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("SalePrice") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("SalePrice") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D ;
 
 
MPRINT(EM_ASSESS):   VAR P_SalePrice _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA _NULL_ ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
 
MPRINT(EM_ASSESS):   RETAIN CUMFREQ 0;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE("P_SalePrice") THEN CUMFREQ + N ;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_TARGET", " " );
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", 0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", "INTERVAL");
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_SalePrice") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *... Start of Interval Depvar Case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............. IF THERE IS FREQ VARIABLE OUTDIST INTERVAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ea_tmpdata (KEEP = P_SalePrice SalePrice _tmpfreqvar_ WHERE = (SalePrice > .)) NWAY;
MPRINT(EM_ASSESS):   CLASS P_SalePrice ;
MPRINT(EM_ASSESS):   VAR SalePrice ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET MIN = _MINTARGET MAX = _MAXTARGET ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... ADD BINS TO DATA ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ..... INTERVAL TARGET CASE ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST ( KEEP = TARGET P_LABEL LOWP UPP SCORE N _TARGETMEAN_ BIN _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_ _MAXP_ ) WORK._TEMPRANK (KEEP = BIN TARGET DATAROLE DECILE N _TARGETMEAN_ _TARGETMIN_ _TARGETMAX_ _MEANP_ _MINP_
_MAXP_ ) ;
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... START OF RETAIN AREA. CONTINOUS DEP VAR ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN TARGET "SalePrice" DATAROLE "VALIDATE" NUMOBS1 - NUMOBS20 0 MAXTGT1 - MAXTGT20 . MINTGT1 - MINTGT20 . MNTGT1 - MNTGT20 0 MAXPTGT1 - MAXPTGT20 . MINPTGT1 - MINPTGT20 . MNPTGT1 - MNPTGT20 0 RNUMOBS1 - RNUMOBS20 0 RMAXTGT1 -
RMAXTGT20 . RMINTGT1 - RMINTGT20 . RMNTGT1 - RMNTGT20 0 RMAXPTGT1 - RMAXPTGT20 . RMINPTGT1 - RMINPTGT20 . RMNPTGT1 - RMNPTGT20 0 ;
MPRINT(EM_ASSESS):   DROP _FREQ_ N1 NUMOBS1 - NUMOBS20 MAXTGT1 - MAXTGT20 MINTGT1 - MINTGT20 MNTGT1 - MNTGT20 MAXPTGT1 - MAXPTGT20 MINPTGT1 - MINPTGT20 MNPTGT1 - MNPTGT20 RNUMOBS1 - RNUMOBS20 RMAXTGT1 - RMAXTGT20 RMINTGT1 - RMINTGT20 RMNTGT1 - RMNTGT20
RMAXPTGT1 - RMAXPTGT20 RMINPTGT1 - RMINPTGT20 RMNPTGT1 - RMNPTGT20 ;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY MAXTGTS (20) MAXTGT1 - MAXTGT20;
MPRINT(EM_ASSESS):   ARRAY MINTGTS (20) MINTGT1 - MINTGT20;
MPRINT(EM_ASSESS):   ARRAY MNTGTS (20) MNTGT1 - MNTGT20;
MPRINT(EM_ASSESS):   ARRAY MAXPTGTS (20) MAXPTGT1 - MAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY MINPTGTS (20) MINPTGT1 - MINPTGT20;
MPRINT(EM_ASSESS):   ARRAY MNPTGTS (20) MNPTGT1 - MNPTGT20;
MPRINT(EM_ASSESS):   ARRAY RNUMOBSS (20) RNUMOBS1 - RNUMOBS20;
MPRINT(EM_ASSESS):   ARRAY RMAXTGTS (20) RMAXTGT1 - RMAXTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINTGTS (20) RMINTGT1 - RMINTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNTGTS (20) RMNTGT1 - RMNTGT20;
MPRINT(EM_ASSESS):   ARRAY RMAXPTGTS (20) RMAXPTGT1 - RMAXPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMINPTGTS (20) RMINPTGT1 - RMINPTGT20;
MPRINT(EM_ASSESS):   ARRAY RMNPTGTS (20) RMNPTGT1 - RMNPTGT20;
MPRINT(EM_ASSESS):   IF _MEANTARGET > . THEN SalePrice = _MEANTARGET ;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   N1 + _FREQ_;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .......... Outdist Processing For Interval Target;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCRBIN = MIN (CEIL (( P_SalePrice - 64982.7) / 1770.045), 20);
MPRINT(EM_ASSESS):   IF SCRBIN <= 0 THEN SCRBIN = 1;
MPRINT(EM_ASSESS):   SCRBIN = 20 + 1 - SCRBIN;
MPRINT(EM_ASSESS):   NUMOBSS ( SCRBIN) = SUM (NUMOBSS ( SCRBIN) , _FREQ_ );
MPRINT(EM_ASSESS):   MNTGTS ( SCRBIN) = SUM (MNTGTS ( SCRBIN), SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   MAXTGTS ( SCRBIN) = MAX (MAXTGTS (SCRBIN), _MAXTARGET);
MPRINT(EM_ASSESS):   MINTGTS ( SCRBIN) = MIN (MINTGTS (SCRBIN), _MINTARGET);
MPRINT(EM_ASSESS):   MAXPTGTS ( SCRBIN) = MAX (MAXPTGTS ( SCRBIN), P_SalePrice);
MPRINT(EM_ASSESS):   MINPTGTS ( SCRBIN) = MIN (MINPTGTS ( SCRBIN), P_SalePrice);
MPRINT(EM_ASSESS):   MNPTGTS ( SCRBIN) = SUM (MNPTGTS ( SCRBIN), P_SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   BIN = CEIL (N1 * 20 / 145);
MPRINT(EM_ASSESS):   IF BIN <= 0 THEN BIN = 1;
MPRINT(EM_ASSESS):   IF BIN > 20 THEN BIN = 20;
MPRINT(EM_ASSESS):   IF BIN < 1 THEN BIN = 1;
MPRINT(EM_ASSESS):   BIN = 21 - BIN;
MPRINT(EM_ASSESS):   RNUMOBSS ( BIN) = SUM (RNUMOBSS ( BIN) , _FREQ_ );
MPRINT(EM_ASSESS):   RMNTGTS ( BIN) = SUM (RMNTGTS ( BIN), SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   RMAXTGTS ( BIN) = MAX (RMAXTGTS (BIN), _MAXTARGET);
MPRINT(EM_ASSESS):   RMINTGTS ( BIN) = MIN (RMINTGTS (BIN), _MINTARGET);
MPRINT(EM_ASSESS):   RMAXPTGTS ( BIN) = MAX (RMAXPTGTS ( BIN), P_SalePrice);
MPRINT(EM_ASSESS):   RMINPTGTS ( BIN) = MIN (RMINPTGTS ( BIN), P_SalePrice);
MPRINT(EM_ASSESS):   RMNPTGTS ( BIN) = SUM (RMNPTGTS ( BIN), P_SalePrice * _FREQ_);
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Start of Outdist Area, Continuous Dep Var;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   UPP = 100383.6;
MPRINT(EM_ASSESS):   DO SCRBIN = 1 TO 20;
MPRINT(EM_ASSESS):   LOWP = UPP - 1770.045;
MPRINT(EM_ASSESS):   N = NUMOBSS (SCRBIN);
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = MNTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = MNPTGTS (SCRBIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = MINTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = MAXTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MINP_ = MINPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   _MAXP_ = MAXPTGTS (SCRBIN);
MPRINT(EM_ASSESS):   SCORE = MEAN (UPP, LOWP);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (LOWP, 12.3)) || " - " || COMPBL (PUT (UPP, 12.3));
MPRINT(EM_ASSESS):   BIN = SCRBIN;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   UPP = LOWP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO SCRBIN = .... ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Output Outranks Continuous Case ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO BIN = 1 TO 20;
MPRINT(EM_ASSESS):   N = RNUMOBSS (BIN);
MPRINT(EM_ASSESS):   DECILE = BIN * 100 / 20;
MPRINT(EM_ASSESS):   IF N > 0 THEN DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = RMNTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   _MEANP_ = RMNPTGTS (BIN) / N ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   _TARGETMEAN_ = .;
MPRINT(EM_ASSESS):   _MEANP_ = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   _TARGETMIN_ = RMINTGTS (BIN);
MPRINT(EM_ASSESS):   _TARGETMAX_ = RMAXTGTS (BIN);
MPRINT(EM_ASSESS):   _MINP_ = RMINPTGTS (BIN);
MPRINT(EM_ASSESS):   _MAXP_ = RMAXPTGTS (BIN);
MPRINT(EM_ASSESS):   P_LABEL = COMPBL (PUT (_MINP_, 12.3)) || " - " || COMPBL (PUT (_MAXP_, 12.3));
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... DO _K = 1 TO DECILEBIN ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..... IF EOF ;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" _TARGETMAX_ = "Max Target" _TARGETMEAN_= "Mean Target" _TARGETMIN_ = "Min Target" DATAROLE = "Data Role" N = "Number of Observations"
TARGET = "Target Variable" LOWP = "Lower Bound" UPP = "Upper Bound" score = "Model Score" scrbin = "Bin" DECILE = "Depth" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...................... End Of Interval Processing;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Range for Predicted" _MEANP_ = "Mean Predicted" _MINP_ = "Min Predicted" _MAXP_ = "Max Predicted" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "SalePrice";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'SalePrice';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MBR2_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "SalePrice";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'SalePrice';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MBR2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length P_LABEL $27;
MPRINT(EM_DIAGRAM):   set EMWS1.MBR2_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
60022      %let _cn = %sysfunc(getoption(CENTER));
60023      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
60024      proc print data=EMWS1.MBR2_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.MBR2_EMREPORTFIT noobs label;
60025      var STAT LABEL TRAIN
60026      VALIDATE
60027      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
60028      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
60029      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
60030      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
60031      run;
 
NOTE: There were 19 observations read from the data set EMWS1.MBR2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 15.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
60032      title10;
MPRINT(EM_DIAGRAM):   title10;
60033      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
60034      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
60035      modify MBR2_EMRANK;
MPRINT(EM_DIAGRAM):   modify MBR2_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
60036      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
60037      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
60038      run;
 
NOTE: MODIFY was successful for EMWS1.MBR2_EMRANK.DATA.
60039      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           1.57 seconds
      cpu time            0.54 seconds
 
 
60040      %let _cn = %sysfunc(getoption(CENTER));
60041      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
60042      proc print data=EMWS1.MBR2_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.MBR2_EMRANK label noobs;
60043      var
60044      decile N _targetMean_ _meanP_;
MPRINT(EM_DIAGRAM):   var decile N _targetMean_ _meanP_;
60045      by
60046      notsorted DATAROLE
60047      notsorted TARGET
60048      notsorted TARGETLABEL
60049      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
60050      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
60051      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
60052      run;
 
NOTE: There were 40 observations read from the data set EMWS1.MBR2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 16.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
60053      title10;
MPRINT(EM_DIAGRAM):   title10;
60054      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
60055      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
60056      modify MBR2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify MBR2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
60057      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
60058      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
60059      run;
 
NOTE: MODIFY was successful for EMWS1.MBR2_EMSCOREDIST.DATA.
60060      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           1.35 seconds
      cpu time            0.32 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.MBR2_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label _targetMean_ _meanp_ n score;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "SalePrice" );
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
